
stm32f103_bare_metal_input_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  4 .ARM          00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001940  00000000  00000000  000104e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000672  00000000  00000000  00011e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  000124a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c8  00000000  00000000  000125c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010fd5  00000000  00000000  00012688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d88  00000000  00000000  0002365d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058606  00000000  00000000  000253e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d9eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002a8  00000000  00000000  0007da68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004a0 	.word	0x080004a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004a0 	.word	0x080004a0

08000170 <Gpio_output_pushpull_conf>:
on board led output push pull PC13
*/


void Gpio_output_pushpull_conf()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	     RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <Gpio_output_pushpull_conf+0x3c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <Gpio_output_pushpull_conf+0x3c>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]

		 GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 8000180:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 8000186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800018a:	6053      	str	r3, [r2, #4]

		 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
		 GPIOC->CRH |= ( GPIO_CRH_MODE13_1 | GPIO_CRH_MODE13_0);
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 8000192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000196:	6053      	str	r3, [r2, #4]

		 //CONFIGURE GPIO OUTPUT MODE AS OUTPUT PUSH PULL
		 GPIOC->CRH |= ~(GPIO_CRH_CNF13_1 | GPIO_CRH_CNF13_0);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <Gpio_output_pushpull_conf+0x40>)
 800019e:	f463 0340 	orn	r3, r3, #12582912	; 0xc00000
 80001a2:	6053      	str	r3, [r2, #4]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000
 80001b0:	40011000 	.word	0x40011000

080001b4 <Gpio_input_pushpull_conf>:

void Gpio_input_pushpull_conf()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001b8:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <Gpio_input_pushpull_conf+0x3c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <Gpio_input_pushpull_conf+0x3c>)
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6193      	str	r3, [r2, #24]

	GPIOA->CRH &= ~(GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 80001c4:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001ca:	f023 0303 	bic.w	r3, r3, #3
 80001ce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_CNF8_1);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_CNF8_0);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <Gpio_input_pushpull_conf+0x40>)
 80001e2:	f023 0304 	bic.w	r3, r3, #4
 80001e6:	6053      	str	r3, [r2, #4]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40010800 	.word	0x40010800

080001f8 <main>:
#endif
*/


int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	 system_clk();
 80001fe:	f000 f855 	bl	80002ac <system_clk>
		 timer_initialise();
 8000202:	f000 f8ab 	bl	800035c <timer_initialise>


	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <main+0x60>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a13      	ldr	r2, [pc, #76]	; (8000258 <main+0x60>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x64>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	4a11      	ldr	r2, [pc, #68]	; (800025c <main+0x64>)
 8000218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800021c:	6053      	str	r3, [r2, #4]



	Gpio_output_pushpull_conf();
 800021e:	f7ff ffa7 	bl	8000170 <Gpio_output_pushpull_conf>
	uint8_t  l =0;
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
	Gpio_input_pushpull_conf();
 8000226:	f7ff ffc5 	bl	80001b4 <Gpio_input_pushpull_conf>

	while(1)
		{

			if ((GPIOA->IDR & GPIO_IDR_IDR8) != 0)
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <main+0x68>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000232:	2b00      	cmp	r3, #0
 8000234:	d006      	beq.n	8000244 <main+0x4c>
			  {
				GPIOC->ODR &= ~GPIO_ODR_ODR13;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <main+0x6c>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <main+0x6c>)
 800023c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000240:	60d3      	str	r3, [r2, #12]
 8000242:	e005      	b.n	8000250 <main+0x58>
			  }
			  else
			  {
				  GPIOC->ODR |= GPIO_ODR_ODR13;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x6c>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <main+0x6c>)
 800024a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024e:	60d3      	str	r3, [r2, #12]
			  }

		l++;
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	3301      	adds	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
			if ((GPIOA->IDR & GPIO_IDR_IDR8) != 0)
 8000256:	e7e8      	b.n	800022a <main+0x32>
 8000258:	40021000 	.word	0x40021000
 800025c:	40010000 	.word	0x40010000
 8000260:	40010800 	.word	0x40010800
 8000264:	40011000 	.word	0x40011000

08000268 <MCO_pin_conf>:
 * 5) Enable the PLL source and wait for it to become stable
 * 6) Enable the Clock source and wait for it to be set
 */

void MCO_pin_conf()
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <MCO_pin_conf+0x3c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <MCO_pin_conf+0x3c>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
				 GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <MCO_pin_conf+0x40>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <MCO_pin_conf+0x40>)
 800027e:	f023 030f 	bic.w	r3, r3, #15
 8000282:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
				 GPIOA->CRH |= ( GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MCO_pin_conf+0x40>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <MCO_pin_conf+0x40>)
 800028a:	f043 0303 	orr.w	r3, r3, #3
 800028e:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO OUTPUT MODE AS alternate function push-pull
				 GPIOA->CRH |= ((GPIO_CRH_CNF8_1) | ~(GPIO_CRH_CNF8_0));
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <MCO_pin_conf+0x40>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <MCO_pin_conf+0x40>)
 8000296:	f063 0304 	orn	r3, r3, #4
 800029a:	6053      	str	r3, [r2, #4]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800

080002ac <system_clk>:

void system_clk()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//ENABLE HSE & WAIT FOR HSE TO BECOME READY
	RCC->CR |= RCC_CR_HSEON ;   // HSE IS 8MHZ
 80002b0:	4b25      	ldr	r3, [pc, #148]	; (8000348 <system_clk+0x9c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a24      	ldr	r2, [pc, #144]	; (8000348 <system_clk+0x9c>)
 80002b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ba:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY))
 80002bc:	bf00      	nop
 80002be:	4b22      	ldr	r3, [pc, #136]	; (8000348 <system_clk+0x9c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <system_clk+0x12>
		 ;
	//configure flash prefetch and the latency related
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 80002ca:	4b20      	ldr	r3, [pc, #128]	; (800034c <system_clk+0xa0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a1f      	ldr	r2, [pc, #124]	; (800034c <system_clk+0xa0>)
 80002d0:	f043 0312 	orr.w	r3, r3, #18
 80002d4:	6013      	str	r3, [r2, #0]
	// CONFIGURE PLL AND Buses(AHB,APB1,APB2)
	//PLL SOURCE: HERE  HSE IS USED AS SOURCE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <system_clk+0x9c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <system_clk+0x9c>)
 80002dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002e0:	6053      	str	r3, [r2, #4]
	//HSE DEVIDER FOR PLL(IF HSE IS USED AS SOURCE FOR PLL) : NOT DIVIDING CLOCK
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;  // SO INPUT TO PLL IS 8MHZ
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <system_clk+0x9c>)
 80002e4:	4a18      	ldr	r2, [pc, #96]	; (8000348 <system_clk+0x9c>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	6053      	str	r3, [r2, #4]
	//PLL MULTIPLIER: HERE I AM MULTIPLYING HSE OUTPUT WITH 4
	RCC->CFGR |= RCC_CFGR_PLLMULL4; //SO OUTPUT FROM PLL IS 32MHZ
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <system_clk+0x9c>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4a16      	ldr	r2, [pc, #88]	; (8000348 <system_clk+0x9c>)
 80002f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f4:	6053      	str	r3, [r2, #4]
	//BUS CLOCK CONFIGURE(APB1,APB2,AHB): NOT DIVIDING
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);  // all buses runs at 32MHZ
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <system_clk+0x9c>)
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <system_clk+0x9c>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	6053      	str	r3, [r2, #4]
	//ENABLE THE PLL
	RCC->CR |= RCC_CR_PLLON;
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <system_clk+0x9c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <system_clk+0x9c>)
 8000304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000308:	6013      	str	r3, [r2, #0]
	//WAIT FOR PLL TO SET
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800030a:	bf00      	nop
 800030c:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <system_clk+0x9c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <system_clk+0x60>
			;

	 //ENABLE SYSTEMCLK AND WAIT
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <system_clk+0x9c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <system_clk+0x9c>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6053      	str	r3, [r2, #4]
	 while(!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 8000324:	bf00      	nop
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <system_clk+0x9c>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 0308 	and.w	r3, r3, #8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <system_clk+0x7a>
	 		 ;

	 MCO_pin_conf();
 8000332:	f7ff ff99 	bl	8000268 <MCO_pin_conf>
	 //CLOCK OUTPUT ON MCO PIN
	 RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <system_clk+0x9c>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	4a03      	ldr	r2, [pc, #12]	; (8000348 <system_clk+0x9c>)
 800033c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000340:	6053      	str	r3, [r2, #4]
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40022000 	.word	0x40022000

08000350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <timer_initialise>:
 * 1 us = 1 count
 * 1ms = 1000us
 * 1 sec = 1000ms
 */
 void timer_initialise()
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036a:	f023 0301 	bic.w	r3, r3, #1
 800036e:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	f023 0301 	bic.w	r3, r3, #1
 800037e:	6113      	str	r3, [r2, #16]

	//RESET THE TIMER2 BUS
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <timer_initialise+0xa4>)
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <timer_initialise+0xa4>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <timer_initialise+0xa4>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <timer_initialise+0xa4>)
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	6113      	str	r3, [r2, #16]


	//Enable Timer2 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <timer_initialise+0xa4>)
 800039a:	69db      	ldr	r3, [r3, #28]
 800039c:	4a18      	ldr	r2, [pc, #96]	; (8000400 <timer_initialise+0xa4>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	61d3      	str	r3, [r2, #28]


    TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6013      	str	r3, [r2, #0]
/**********************for example 1*******************************/
    //Timer prescaler value
    TIM2->PSC = 32;
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b8:	2220      	movs	r2, #32
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM2->PSC = 0;
    //Timer Auto reload register value
          TIM2->ARR = 65535;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
    //65535
   // TIM2->ARR = 32;

    TIM2-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d0:	f023 0302 	bic.w	r3, r3, #2
 80003d4:	6013      	str	r3, [r2, #0]

   //Enable the update generation for updating the shadow register with preload register contents with new values
   TIM2->EGR |= TIM_EGR_UG;
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6153      	str	r3, [r2, #20]
   //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of my register
   TIM2->SR &= ~(TIM_SR_UIF);
 80003e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f0:	f023 0301 	bic.w	r3, r3, #1
 80003f4:	6113      	str	r3, [r2, #16]
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000406:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000408:	f7ff ffa2 	bl	8000350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000432:	f000 f811 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff fedf 	bl	80001f8 <main>

0800043a <LoopForever>:

LoopForever:
    b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   r0, =_estack
 800043c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000448:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 800044c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000450:	2000001c 	.word	0x2000001c

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	2500      	movs	r5, #0
 800045c:	4e0c      	ldr	r6, [pc, #48]	; (8000490 <__libc_init_array+0x38>)
 800045e:	4c0d      	ldr	r4, [pc, #52]	; (8000494 <__libc_init_array+0x3c>)
 8000460:	1ba4      	subs	r4, r4, r6
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	42a5      	cmp	r5, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	f000 f81a 	bl	80004a0 <_init>
 800046c:	2500      	movs	r5, #0
 800046e:	4e0a      	ldr	r6, [pc, #40]	; (8000498 <__libc_init_array+0x40>)
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <__libc_init_array+0x44>)
 8000472:	1ba4      	subs	r4, r4, r6
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	42a5      	cmp	r5, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000480:	4798      	blx	r3
 8000482:	3501      	adds	r5, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800048a:	4798      	blx	r3
 800048c:	3501      	adds	r5, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004b8 	.word	0x080004b8
 8000494:	080004b8 	.word	0x080004b8
 8000498:	080004b8 	.word	0x080004b8
 800049c:	080004bc 	.word	0x080004bc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
