
stm32f103_w25q128jv_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a3c  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000000  08000a3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08000a3c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001799  00000000  00000000  00010a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000935  00000000  00000000  000121fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00012b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00012d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000662  00000000  00000000  00012ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c7a  00000000  00000000  00013552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054649  00000000  00000000  000161cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006a815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000061c  00000000  00000000  0006a868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000944 	.word	0x08000944

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000944 	.word	0x08000944

08000170 <main>:

char rx_buf[1025];
char tx_buf[10];

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	 system_clk();
 8000176:	f000 f875 	bl	8000264 <system_clk>
	 uart_init();
 800017a:	f000 fa53 	bl	8000624 <uart_init>
	 spi_init();
 800017e:	f000 f921 	bl	80003c4 <spi_init>
	 timer_initialise();
 8000182:	f000 f991 	bl	80004a8 <timer_initialise>

	 uart_tran_string("W25q128jv spi memeory application code\n");
 8000186:	4820      	ldr	r0, [pc, #128]	; (8000208 <main+0x98>)
 8000188:	f000 fa88 	bl	800069c <uart_tran_string>
	 uart_tran_string("Subscribe to Gettobyte\n");
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <main+0x9c>)
 800018e:	f000 fa85 	bl	800069c <uart_tran_string>
	 uart_tran_string("Kunal Gupta\n");
 8000192:	481f      	ldr	r0, [pc, #124]	; (8000210 <main+0xa0>)
 8000194:	f000 fa82 	bl	800069c <uart_tran_string>

     char p,q,r;
     char * tran_buff = "0000/285444500/771888200/00100/255/000/010/0000/285444500/771888200/00100/255/000/010/0000/285444500/771888200/00100/255/000/010/\n";
 8000198:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <main+0xa4>)
 800019a:	607b      	str	r3, [r7, #4]

	while(1)
	{

		delay_ms(100);
 800019c:	2064      	movs	r0, #100	; 0x64
 800019e:	f000 f9f5 	bl	800058c <delay_ms>

		 p = ReadSR(ReadSR1);
 80001a2:	2005      	movs	r0, #5
 80001a4:	f000 fb5e 	bl	8000864 <ReadSR>
 80001a8:	4603      	mov	r3, r0
 80001aa:	70fb      	strb	r3, [r7, #3]
		 q = ReadSR(ReadSR2);
 80001ac:	2035      	movs	r0, #53	; 0x35
 80001ae:	f000 fb59 	bl	8000864 <ReadSR>
 80001b2:	4603      	mov	r3, r0
 80001b4:	70bb      	strb	r3, [r7, #2]
		 r = ReadSR(ReadSR3);
 80001b6:	2015      	movs	r0, #21
 80001b8:	f000 fb54 	bl	8000864 <ReadSR>
 80001bc:	4603      	mov	r3, r0
 80001be:	707b      	strb	r3, [r7, #1]

		 erase_sector4KB(read_addr1);
 80001c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001c4:	f000 fb22 	bl	800080c <erase_sector4KB>
		 delay_ms(100);
 80001c8:	2064      	movs	r0, #100	; 0x64
 80001ca:	f000 f9df 	bl	800058c <delay_ms>
		 W25_Write_Data(read_addr1,tran_buff,135);
 80001ce:	2287      	movs	r2, #135	; 0x87
 80001d0:	6879      	ldr	r1, [r7, #4]
 80001d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001d6:	f000 fad9 	bl	800078c <W25_Write_Data>
		 delay_ms(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f9d6 	bl	800058c <delay_ms>
		 W25_Read_Data(read_addr1,rx_buf,135);
 80001e0:	2287      	movs	r2, #135	; 0x87
 80001e2:	490d      	ldr	r1, [pc, #52]	; (8000218 <main+0xa8>)
 80001e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001e8:	f000 fa8c 	bl	8000704 <W25_Read_Data>
		 delay_ms(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 f9cd 	bl	800058c <delay_ms>
		 uart_tran_string(rx_buf);
 80001f2:	4809      	ldr	r0, [pc, #36]	; (8000218 <main+0xa8>)
 80001f4:	f000 fa52 	bl	800069c <uart_tran_string>
		 uart_tran_string("\n");
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0xac>)
 80001fa:	f000 fa4f 	bl	800069c <uart_tran_string>

		delay_ms(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 f9c4 	bl	800058c <delay_ms>
		delay_ms(100);
 8000204:	e7ca      	b.n	800019c <main+0x2c>
 8000206:	bf00      	nop
 8000208:	0800095c 	.word	0x0800095c
 800020c:	08000984 	.word	0x08000984
 8000210:	0800099c 	.word	0x0800099c
 8000214:	080009ac 	.word	0x080009ac
 8000218:	20000020 	.word	0x20000020
 800021c:	08000a30 	.word	0x08000a30

08000220 <MCO_pin_conf>:
 * 5) Enable the PLL source and wait for it to become stable
 * 6) Enable the Clock source and wait for it to be set
 */

void MCO_pin_conf()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MCO_pin_conf+0x3c>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <MCO_pin_conf+0x3c>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
				 GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MCO_pin_conf+0x40>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <MCO_pin_conf+0x40>)
 8000236:	f023 030f 	bic.w	r3, r3, #15
 800023a:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
				 GPIOA->CRH |= ( GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MCO_pin_conf+0x40>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <MCO_pin_conf+0x40>)
 8000242:	f043 0303 	orr.w	r3, r3, #3
 8000246:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO OUTPUT MODE AS alternate function push-pull
				 GPIOA->CRH |= ((GPIO_CRH_CNF8_1) | ~(GPIO_CRH_CNF8_0));
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MCO_pin_conf+0x40>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <MCO_pin_conf+0x40>)
 800024e:	f063 0304 	orn	r3, r3, #4
 8000252:	6053      	str	r3, [r2, #4]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <system_clk>:

void system_clk()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	//ENABLE HSE & WAIT FOR HSE TO BECOME READY
	RCC->CR |= RCC_CR_HSEON ;   // HSE IS 8MHZ
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <system_clk+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a24      	ldr	r2, [pc, #144]	; (8000300 <system_clk+0x9c>)
 800026e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000272:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY))
 8000274:	bf00      	nop
 8000276:	4b22      	ldr	r3, [pc, #136]	; (8000300 <system_clk+0x9c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <system_clk+0x12>
		 ;
	//configure flash prefetch and the latency related
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <system_clk+0xa0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <system_clk+0xa0>)
 8000288:	f043 0312 	orr.w	r3, r3, #18
 800028c:	6013      	str	r3, [r2, #0]
	// CONFIGURE PLL AND Buses(AHB,APB1,APB2)
	//PLL SOURCE: HERE  HSE IS USED AS SOURCE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <system_clk+0x9c>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <system_clk+0x9c>)
 8000294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000298:	6053      	str	r3, [r2, #4]
	//HSE DEVIDER FOR PLL(IF HSE IS USED AS SOURCE FOR PLL) : NOT DIVIDING CLOCK
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;  // SO INPUT TO PLL IS 8MHZ
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <system_clk+0x9c>)
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <system_clk+0x9c>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	6053      	str	r3, [r2, #4]
	//PLL MULTIPLIER: HERE I AM MULTIPLYING HSE OUTPUT WITH 4
	RCC->CFGR |= RCC_CFGR_PLLMULL4; //SO OUTPUT FROM PLL IS 32MHZ
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <system_clk+0x9c>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <system_clk+0x9c>)
 80002a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ac:	6053      	str	r3, [r2, #4]
	//BUS CLOCK CONFIGURE(APB1,APB2,AHB): NOT DIVIDING
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);  // all buses runs at 32MHZ
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <system_clk+0x9c>)
 80002b0:	4a13      	ldr	r2, [pc, #76]	; (8000300 <system_clk+0x9c>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	6053      	str	r3, [r2, #4]
	//ENABLE THE PLL
	RCC->CR |= RCC_CR_PLLON;
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <system_clk+0x9c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <system_clk+0x9c>)
 80002bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c0:	6013      	str	r3, [r2, #0]
	//WAIT FOR PLL TO SET
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80002c2:	bf00      	nop
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <system_clk+0x9c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <system_clk+0x60>
			;

	 //ENABLE SYSTEMCLK AND WAIT
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <system_clk+0x9c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <system_clk+0x9c>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6053      	str	r3, [r2, #4]
	 while(!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 80002dc:	bf00      	nop
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <system_clk+0x9c>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f003 0308 	and.w	r3, r3, #8
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <system_clk+0x7a>
	 		 ;

	 MCO_pin_conf();
 80002ea:	f7ff ff99 	bl	8000220 <MCO_pin_conf>
	 //CLOCK OUTPUT ON MCO PIN
	 RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <system_clk+0x9c>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <system_clk+0x9c>)
 80002f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f8:	6053      	str	r3, [r2, #4]
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40022000 	.word	0x40022000

08000308 <spi_pin_conf>:
#include "spi.h"



void spi_pin_conf()
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800030c:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <spi_pin_conf+0xb4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <spi_pin_conf+0xb4>)
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000318:	4b28      	ldr	r3, [pc, #160]	; (80003bc <spi_pin_conf+0xb4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a27      	ldr	r2, [pc, #156]	; (80003bc <spi_pin_conf+0xb4>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]

	//PA4- CE,PA5-SCK,PA7-MOSI,PA6-MISO:

	//PA5 SCK will be set as alternate function output pushpull
	GPIOA->CRL |= GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1;      //Output Mode
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <spi_pin_conf+0xb8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <spi_pin_conf+0xb8>)
 800032a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800032e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF5_1;         //Alternate Function
 8000330:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <spi_pin_conf+0xb8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a22      	ldr	r2, [pc, #136]	; (80003c0 <spi_pin_conf+0xb8>)
 8000336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=  ~(GPIO_CRL_CNF5_0);
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <spi_pin_conf+0xb8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <spi_pin_conf+0xb8>)
 8000342:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000346:	6013      	str	r3, [r2, #0]
 //PA7 MOSI will be set as alternate function output pushpull
	GPIOA->CRL |= GPIO_CRL_MODE7_0 | GPIO_CRL_MODE7_1;     //Output Mode
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <spi_pin_conf+0xb8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <spi_pin_conf+0xb8>)
 800034e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000352:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;         //Alternate Function
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <spi_pin_conf+0xb8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <spi_pin_conf+0xb8>)
 800035a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=  ~(GPIO_CRL_CNF7_0);
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <spi_pin_conf+0xb8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <spi_pin_conf+0xb8>)
 8000366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800036a:	6013      	str	r3, [r2, #0]
//PA4 CE will be set as General Purpose Output Mode
	GPIOA->CRL |= GPIO_CRL_MODE4_0 | GPIO_CRL_MODE4_1;     //Output Mode
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <spi_pin_conf+0xb8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <spi_pin_conf+0xb8>)
 8000372:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF4_1;         //General Purpose
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <spi_pin_conf+0xb8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <spi_pin_conf+0xb8>)
 800037e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=  ~(GPIO_CRL_CNF4_0);  //GPIOA->CRL &=  ~(GPIO_CRL_CNF4_0);
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <spi_pin_conf+0xb8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <spi_pin_conf+0xb8>)
 800038a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800038e:	6013      	str	r3, [r2, #0]
//PA6 MISO will be set as Floating Input Mode
	GPIOA->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1);      //Input Mode
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <spi_pin_conf+0xb8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <spi_pin_conf+0xb8>)
 8000396:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF6_1;        //Floating Input
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <spi_pin_conf+0xb8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <spi_pin_conf+0xb8>)
 80003a2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003a6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |=  (GPIO_CRL_CNF6_0);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <spi_pin_conf+0xb8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <spi_pin_conf+0xb8>)
 80003ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003b2:	6013      	str	r3, [r2, #0]


}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800

080003c4 <spi_init>:

void spi_init()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

	spi_pin_conf();
 80003c8:	f7ff ff9e 	bl	8000308 <spi_pin_conf>

	//BAUD RATE = FCK/32=1MHZ
	SPI1->CR1 &= ~( SPI_CR1_BR_0| SPI_CR1_BR_1);
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <spi_init+0x54>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a11      	ldr	r2, [pc, #68]	; (8000418 <spi_init+0x54>)
 80003d2:	f023 0318 	bic.w	r3, r3, #24
 80003d6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <spi_init+0x54>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <spi_init+0x54>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6013      	str	r3, [r2, #0]

	//SLAVE SELECT PIN SETING
	SPI1->CR1 &= ~(SPI_CR1_SSM); //SSM bit = 0
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <spi_init+0x54>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <spi_init+0x54>)
 80003ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80003ee:	6013      	str	r3, [r2, #0]
	SPI1->CR2 |= (SPI_CR2_SSOE);//SSOE bit = 1
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <spi_init+0x54>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4a08      	ldr	r2, [pc, #32]	; (8000418 <spi_init+0x54>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6053      	str	r3, [r2, #4]

	//MASTER SELECTION
	SPI1->CR1 |= SPI_CR1_MSTR;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <spi_init+0x54>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <spi_init+0x54>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= SPI_CR1_SPE;
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <spi_init+0x54>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a02      	ldr	r2, [pc, #8]	; (8000418 <spi_init+0x54>)
 800040e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000412:	6013      	str	r3, [r2, #0]

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40013000 	.word	0x40013000

0800041c <spi_mast_tran_byte>:

void spi_mast_tran_byte(uint8_t data)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	//GPIOA->ODR &= ~GPIO_ODR_ODR4;
	SPI1->DR = data;   //on writing data to data register, txe bit is cleared
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <spi_mast_tran_byte+0x38>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_TXE));    //when txe bit is set means data is shifted out from "out" pin
 800042c:	bf00      	nop
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <spi_mast_tran_byte+0x38>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <spi_mast_tran_byte+0x12>
	while((SPI1->SR & SPI_SR_BSY));
 800043a:	bf00      	nop
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <spi_mast_tran_byte+0x38>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f9      	bne.n	800043c <spi_mast_tran_byte+0x20>
	//GPIOA->ODR |= GPIO_ODR_ODR4;
}
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40013000 	.word	0x40013000

08000458 <spi_mast_recv_byte>:

uint8_t spi_mast_recv_byte()
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
	uint8_t recv_byte = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]
	//GPIOA->ODR &= ~GPIO_ODR_ODR4;
	SPI1->DR = 0xff;
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <spi_mast_recv_byte+0x40>)
 8000464:	22ff      	movs	r2, #255	; 0xff
 8000466:	60da      	str	r2, [r3, #12]
	while((SPI1->SR & SPI_SR_BSY));
 8000468:	bf00      	nop
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <spi_mast_recv_byte+0x40>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f9      	bne.n	800046a <spi_mast_recv_byte+0x12>
	while((SPI1->SR & SPI_SR_RXNE))
 8000476:	e002      	b.n	800047e <spi_mast_recv_byte+0x26>
	recv_byte = SPI1->DR;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <spi_mast_recv_byte+0x40>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	71fb      	strb	r3, [r7, #7]
	while((SPI1->SR & SPI_SR_RXNE))
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <spi_mast_recv_byte+0x40>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1f6      	bne.n	8000478 <spi_mast_recv_byte+0x20>
	return recv_byte;
 800048a:	79fb      	ldrb	r3, [r7, #7]

}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40013000 	.word	0x40013000

0800049c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <timer_initialise>:
 * 1 us = 1 count
 * 1ms = 1000us
 * 1 sec = 1000ms
 */
 void timer_initialise()
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 80004ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b6:	f023 0301 	bic.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c0:	691b      	ldr	r3, [r3, #16]
 80004c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c6:	f023 0301 	bic.w	r3, r3, #1
 80004ca:	6113      	str	r3, [r2, #16]

	//RESET THE TIMER2 BUS
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <timer_initialise+0xa4>)
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <timer_initialise+0xa4>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <timer_initialise+0xa4>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a1b      	ldr	r2, [pc, #108]	; (800054c <timer_initialise+0xa4>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6113      	str	r3, [r2, #16]


	//Enable Timer2 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <timer_initialise+0xa4>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a18      	ldr	r2, [pc, #96]	; (800054c <timer_initialise+0xa4>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	61d3      	str	r3, [r2, #28]


    TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	6013      	str	r3, [r2, #0]
/**********************for example 1*******************************/
    //Timer prescaler value
    TIM2->PSC = 32;
 8000500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000504:	2220      	movs	r2, #32
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM2->PSC = 0;
    //Timer Auto reload register value
    TIM2->ARR = 0xffff;
 8000508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
    //65535
    //TIM2->ARR = 32;

    TIM2-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 8000512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051c:	f023 0302 	bic.w	r3, r3, #2
 8000520:	6013      	str	r3, [r2, #0]

   //Enable the update generation for updating the shadow register with preload register contents with new values
   TIM2->EGR |= TIM_EGR_UG;
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6153      	str	r3, [r2, #20]
   //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of my register
   TIM2->SR &= ~(TIM_SR_UIF);
 8000532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053c:	f023 0301 	bic.w	r3, r3, #1
 8000540:	6113      	str	r3, [r2, #16]
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <delay_us>:
void delay_us(uint16_t us)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	TIM2->CR1 |= TIM_CR1_CEN;
 800055a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6013      	str	r3, [r2, #0]
	//TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
	//TIM2->EGR |= TIM_EGR_UG; // SET UG bit to reinitailse the counter register with 0
	TIM2->CNT=0; // initialise counter register
 800056a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
	//while(!(TIM2->SR & (1<<TIM_SR_UIF)));
	//TIM2->SR &= ~(TIM_SR_UIF); //clear the update interrupt flag as this is set when CNT is reinitialsed with 0
	while(TIM2->CNT < us)
 8000572:	bf00      	nop
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3f9      	bcc.n	8000574 <delay_us+0x24>
	{	//uart_tran_dec(TIM2->CNT);
	}
	//TIM2->CR1 &= ~TIM_CR1_CEN;

}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <delay_ms>:
void delay_ms(uint16_t ms)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	81fb      	strh	r3, [r7, #14]
 800059a:	e006      	b.n	80005aa <delay_ms+0x1e>
	delay_us(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f7ff ffd6 	bl	8000550 <delay_us>
	for (uint16_t i=0; i<ms; i++)
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	3301      	adds	r3, #1
 80005a8:	81fb      	strh	r3, [r7, #14]
 80005aa:	89fa      	ldrh	r2, [r7, #14]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3f4      	bcc.n	800059c <delay_ms+0x10>
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <uart2_pin_conf>:
#include "uart.h"

//************************STM32- UART2 functions*******************//
//PA3- RX, PA2-TX
void uart2_pin_conf()
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <uart2_pin_conf+0x48>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <uart2_pin_conf+0x48>)
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	61d3      	str	r3, [r2, #28]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <uart2_pin_conf+0x48>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <uart2_pin_conf+0x48>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA2 as output*/
	 GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <uart2_pin_conf+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <uart2_pin_conf+0x4c>)
 80005de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80005e2:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL |= (GPIO_CRL_CNF2_1);
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <uart2_pin_conf+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <uart2_pin_conf+0x4c>)
 80005ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ee:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <uart2_pin_conf+0x4c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <uart2_pin_conf+0x4c>)
 80005f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005fa:	6013      	str	r3, [r2, #0]
	 /*
	   * PIN PA3 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <uart_boud_rate>:

void uart_boud_rate()
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	//usartdiv = 208.33
	//0.33*16 = div_frac = d5.28 = 0x5
	//d208 = 0xd0
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
     USART2->BRR = 0xd05;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <uart_boud_rate+0x14>)
 8000612:	f640 5205 	movw	r2, #3333	; 0xd05
 8000616:	609a      	str	r2, [r3, #8]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40004400 	.word	0x40004400

08000624 <uart_init>:
void uart_init()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

	uart2_pin_conf();
 8000628:	f7ff ffc8 	bl	80005bc <uart2_pin_conf>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART2->CR1 = 0x0000;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <uart_init+0x48>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART2->CR1 |= USART_CR1_UE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <uart_init+0x48>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <uart_init+0x48>)
 8000638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800063c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~USART_CR1_M;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <uart_init+0x48>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <uart_init+0x48>)
 8000644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000648:	60d3      	str	r3, [r2, #12]
	//enable transmitter
	USART2->CR1 |= USART_CR1_TE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <uart_init+0x48>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <uart_init+0x48>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART2->CR1 |= USART_CR1_RE;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <uart_init+0x48>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <uart_init+0x48>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	60d3      	str	r3, [r2, #12]
    uart_boud_rate();
 8000662:	f7ff ffd3 	bl	800060c <uart_boud_rate>

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400

08000670 <uart_tran_byte>:
void uart_tran_byte(uint8_t byte)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE));
 800067a:	bf00      	nop
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <uart_tran_byte+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f9      	beq.n	800067c <uart_tran_byte+0xc>
	USART2->DR = byte;
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <uart_tran_byte+0x28>)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	6053      	str	r3, [r2, #4]

}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40004400 	.word	0x40004400

0800069c <uart_tran_string>:
{
	while(!(USART2->SR & USART_SR_RXNE));
	return USART2->DR;
}
void uart_tran_string(const char *myString)      /////to print any string
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while (*myString)
 80006a4:	e006      	b.n	80006b4 <uart_tran_string+0x18>
	uart_tran_byte(*myString++);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffde 	bl	8000670 <uart_tran_byte>
	while (*myString)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f4      	bne.n	80006a6 <uart_tran_string+0xa>
	while(!(USART2->SR & USART_SR_TC));
 80006bc:	bf00      	nop
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <uart_tran_string+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <uart_tran_string+0x22>

}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40004400 	.word	0x40004400

080006d8 <WriteEnable_flash>:
spi_mast_tran_byte(reset1);
spi_mast_tran_byte(reset2);
  cs_set();
}
void WriteEnable_flash()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	cs_reset();
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <WriteEnable_flash+0x28>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <WriteEnable_flash+0x28>)
 80006e2:	f023 0310 	bic.w	r3, r3, #16
 80006e6:	60d3      	str	r3, [r2, #12]
	spi_mast_tran_byte(WriteEnable);
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff fe97 	bl	800041c <spi_mast_tran_byte>
	cs_set();
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <WriteEnable_flash+0x28>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4a03      	ldr	r2, [pc, #12]	; (8000700 <WriteEnable_flash+0x28>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	60d3      	str	r3, [r2, #12]

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800

08000704 <W25_Read_Data>:
void W25_Read_Data(uint32_t addr, char block[], uint32_t sz)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	volatile uint8_t recv_char=0;
 8000710:	2300      	movs	r3, #0
 8000712:	75bb      	strb	r3, [r7, #22]
	uint8_t i=0;
 8000714:	2300      	movs	r3, #0
 8000716:	75fb      	strb	r3, [r7, #23]
  cs_reset();
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <W25_Read_Data+0x84>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <W25_Read_Data+0x84>)
 800071e:	f023 0310 	bic.w	r3, r3, #16
 8000722:	60d3      	str	r3, [r2, #12]
  spi_mast_tran_byte(ReadData);
 8000724:	2003      	movs	r0, #3
 8000726:	f7ff fe79 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(((addr>>16) & (0xff)));
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	0c1b      	lsrs	r3, r3, #16
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fe73 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(((addr>>8) & (0xff)));
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe6d 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(addr & 0xff);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fe68 	bl	800041c <spi_mast_tran_byte>
  while ((sz--)!= 0)                             //Buffer for reading required number of bytes
 800074c:	e00c      	b.n	8000768 <W25_Read_Data+0x64>
  	{

  	recv_char= spi_mast_recv_byte();
 800074e:	f7ff fe83 	bl	8000458 <spi_mast_recv_byte>
 8000752:	4603      	mov	r3, r0
 8000754:	75bb      	strb	r3, [r7, #22]
  		block[i++] = recv_char;
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	75fa      	strb	r2, [r7, #23]
 800075c:	461a      	mov	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	4413      	add	r3, r2
 8000762:	7dba      	ldrb	r2, [r7, #22]
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]
  while ((sz--)!= 0)                             //Buffer for reading required number of bytes
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1ed      	bne.n	800074e <W25_Read_Data+0x4a>
  	}  cs_set();
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <W25_Read_Data+0x84>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <W25_Read_Data+0x84>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	60d3      	str	r3, [r2, #12]
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010800 	.word	0x40010800

0800078c <W25_Write_Data>:
void W25_Write_Data(uint32_t addr, char block[], uint32_t sz)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	WriteEnable_flash();
 8000798:	f7ff ff9e 	bl	80006d8 <WriteEnable_flash>
  cs_reset();
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <W25_Write_Data+0x7c>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <W25_Write_Data+0x7c>)
 80007a2:	f023 0310 	bic.w	r3, r3, #16
 80007a6:	60d3      	str	r3, [r2, #12]
  spi_mast_tran_byte(WriteData);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fe37 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(((addr>>16) & (0xff)));
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe31 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(((addr>>8) & (0xff)));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe2b 	bl	800041c <spi_mast_tran_byte>
  spi_mast_tran_byte(addr & 0xff);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe26 	bl	800041c <spi_mast_tran_byte>
  for(uint8_t i = 0;i<sz;i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	75fb      	strb	r3, [r7, #23]
 80007d4:	e009      	b.n	80007ea <W25_Write_Data+0x5e>
  {
   spi_mast_tran_byte(block[i]);
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe1c 	bl	800041c <spi_mast_tran_byte>
  for(uint8_t i = 0;i<sz;i++)
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	3301      	adds	r3, #1
 80007e8:	75fb      	strb	r3, [r7, #23]
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f1      	bhi.n	80007d6 <W25_Write_Data+0x4a>
   }
  cs_set();
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <W25_Write_Data+0x7c>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <W25_Write_Data+0x7c>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	60d3      	str	r3, [r2, #12]
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010800 	.word	0x40010800

0800080c <erase_sector4KB>:
  // sprintf(str1,"ID:0x%X\r\n",id);
  // HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);

}
void erase_sector4KB(uint32_t addr)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	WriteEnable_flash();
 8000814:	f7ff ff60 	bl	80006d8 <WriteEnable_flash>
	cs_reset();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <erase_sector4KB+0x54>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <erase_sector4KB+0x54>)
 800081e:	f023 0310 	bic.w	r3, r3, #16
 8000822:	60d3      	str	r3, [r2, #12]
	spi_mast_tran_byte(SectErase4KB);
 8000824:	2020      	movs	r0, #32
 8000826:	f7ff fdf9 	bl	800041c <spi_mast_tran_byte>
	spi_mast_tran_byte(((addr>>16) & (0xff)));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fdf3 	bl	800041c <spi_mast_tran_byte>
	spi_mast_tran_byte(((addr>>8) & (0xff)));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fded 	bl	800041c <spi_mast_tran_byte>
	spi_mast_tran_byte(addr & 0xff);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fde8 	bl	800041c <spi_mast_tran_byte>
	cs_set();
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <erase_sector4KB+0x54>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <erase_sector4KB+0x54>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40010800 	.word	0x40010800

08000864 <ReadSR>:
	spi_mast_tran_byte(SR_data);
	cs_set();

}
uint8_t ReadSR(uint8_t SR_address)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t readsr = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
	cs_reset();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <ReadSR+0x40>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <ReadSR+0x40>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	60d3      	str	r3, [r2, #12]
	spi_mast_tran_byte(SR_address);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fdcb 	bl	800041c <spi_mast_tran_byte>
	readsr = spi_mast_recv_byte();
 8000886:	f7ff fde7 	bl	8000458 <spi_mast_recv_byte>
 800088a:	4603      	mov	r3, r0
 800088c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <ReadSR+0x40>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <ReadSR+0x40>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	60d3      	str	r3, [r2, #12]
	return readsr;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800

080008a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ac:	f7ff fdf6 	bl	800049c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d6:	f000 f811 	bl	80008fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff fc49 	bl	8000170 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   r0, =_estack
 80008e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008ec:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 80008f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008f4:	20000434 	.word	0x20000434

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <__libc_init_array>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	2600      	movs	r6, #0
 8000900:	4d0c      	ldr	r5, [pc, #48]	; (8000934 <__libc_init_array+0x38>)
 8000902:	4c0d      	ldr	r4, [pc, #52]	; (8000938 <__libc_init_array+0x3c>)
 8000904:	1b64      	subs	r4, r4, r5
 8000906:	10a4      	asrs	r4, r4, #2
 8000908:	42a6      	cmp	r6, r4
 800090a:	d109      	bne.n	8000920 <__libc_init_array+0x24>
 800090c:	f000 f81a 	bl	8000944 <_init>
 8000910:	2600      	movs	r6, #0
 8000912:	4d0a      	ldr	r5, [pc, #40]	; (800093c <__libc_init_array+0x40>)
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <__libc_init_array+0x44>)
 8000916:	1b64      	subs	r4, r4, r5
 8000918:	10a4      	asrs	r4, r4, #2
 800091a:	42a6      	cmp	r6, r4
 800091c:	d105      	bne.n	800092a <__libc_init_array+0x2e>
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f855 3b04 	ldr.w	r3, [r5], #4
 8000924:	4798      	blx	r3
 8000926:	3601      	adds	r6, #1
 8000928:	e7ee      	b.n	8000908 <__libc_init_array+0xc>
 800092a:	f855 3b04 	ldr.w	r3, [r5], #4
 800092e:	4798      	blx	r3
 8000930:	3601      	adds	r6, #1
 8000932:	e7f2      	b.n	800091a <__libc_init_array+0x1e>
 8000934:	08000a34 	.word	0x08000a34
 8000938:	08000a34 	.word	0x08000a34
 800093c:	08000a34 	.word	0x08000a34
 8000940:	08000a38 	.word	0x08000a38

08000944 <_init>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	bf00      	nop
 8000948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094a:	bc08      	pop	{r3}
 800094c:	469e      	mov	lr, r3
 800094e:	4770      	bx	lr

08000950 <_fini>:
 8000950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000952:	bf00      	nop
 8000954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000956:	bc08      	pop	{r3}
 8000958:	469e      	mov	lr, r3
 800095a:	4770      	bx	lr
