
stm32f103_baremetal_esp8266_web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001768  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b98  08001b98  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08001b98  08001b98  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b98  08001b98  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b98  08001b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08001ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000230  08001dd0  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  08001dd0  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bfc  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f9a  00000000  00000000  00024e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f8  00000000  00000000  00025df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000260  00000000  00000000  000260e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011cba  00000000  00000000  00026348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003dfd  00000000  00000000  00038002  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059424  00000000  00000000  0003bdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00095223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d6c  00000000  00000000  000952a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000230 	.word	0x20000230
 800014c:	00000000 	.word	0x00000000
 8000150:	08001880 	.word	0x08001880

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000234 	.word	0x20000234
 800016c:	08001880 	.word	0x08001880

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0e      	blt.n	80001b0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000192:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <__NVIC_GetActive+0x3c>)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	095b      	lsrs	r3, r3, #5
 800019a:	3380      	adds	r3, #128	; 0x80
 800019c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 031f 	and.w	r3, r3, #31
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	e000      	b.n	80001b2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80001b0:	2300      	movs	r3, #0
  }
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	e000e100 	.word	0xe000e100

080001c0 <USART2_IRQHandler>:
	_Bool gb_RX_Buffer_Overflow_UART2; // This flag is set on USART Receiver // buffer overflow
	char gb_rx_byte;
	char gb_RX_DATA_UART2[gb_RX_BUFFER_SIZE_UART2];

void USART2_IRQHandler(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	//  GB_UART_TxChar2('k');
	  if((__NVIC_GetActive(USART2_IRQn)) == 1)
 80001c4:	2026      	movs	r0, #38	; 0x26
 80001c6:	f7ff ffdb 	bl	8000180 <__NVIC_GetActive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d136      	bne.n	800023e <USART2_IRQHandler+0x7e>
    //check if we are here because of RXNE interrupt
         if (USART2->SR & USART_SR_RXNE) //if RX is not empty
 80001d0:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <USART2_IRQHandler+0x84>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d030      	beq.n	800023e <USART2_IRQHandler+0x7e>
                {
                      gb_rx_byte = USART2->DR; //fetch the data received
 80001dc:	4b19      	ldr	r3, [pc, #100]	; (8000244 <USART2_IRQHandler+0x84>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b19      	ldr	r3, [pc, #100]	; (8000248 <USART2_IRQHandler+0x88>)
 80001e4:	701a      	strb	r2, [r3, #0]
                      gb_Rx_Buffer_UART2[gb_RX_Wr_Index_UART2]= gb_rx_byte;   /* put received char in buffer */
 80001e6:	4b19      	ldr	r3, [pc, #100]	; (800024c <USART2_IRQHandler+0x8c>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <USART2_IRQHandler+0x88>)
 80001ee:	7819      	ldrb	r1, [r3, #0]
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <USART2_IRQHandler+0x90>)
 80001f2:	5499      	strb	r1, [r3, r2]
  		              if(gb_RX_Wr_Index_UART2++ > gb_RX_BUFFER_SIZE_UART2)
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <USART2_IRQHandler+0x8c>)
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	1c5a      	adds	r2, r3, #1
 80001fa:	b291      	uxth	r1, r2
 80001fc:	4a13      	ldr	r2, [pc, #76]	; (800024c <USART2_IRQHandler+0x8c>)
 80001fe:	8011      	strh	r1, [r2, #0]
 8000200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000204:	d902      	bls.n	800020c <USART2_IRQHandler+0x4c>
  		              gb_RX_Wr_Index_UART2 = 0;
 8000206:	4b11      	ldr	r3, [pc, #68]	; (800024c <USART2_IRQHandler+0x8c>)
 8000208:	2200      	movs	r2, #0
 800020a:	801a      	strh	r2, [r3, #0]
  		              if(++gb_RX_Counter_UART2 > gb_RX_BUFFER_SIZE_UART2) /* keep a character count */
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <USART2_IRQHandler+0x94>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	b29a      	uxth	r2, r3
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <USART2_IRQHandler+0x94>)
 8000216:	801a      	strh	r2, [r3, #0]
 8000218:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <USART2_IRQHandler+0x94>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000220:	d906      	bls.n	8000230 <USART2_IRQHandler+0x70>
  		                   {
  			                    /* overflow check.. */
  			                    gb_RX_Counter_UART2 = 0; /* if too many chars came */
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <USART2_IRQHandler+0x94>)
 8000224:	2200      	movs	r2, #0
 8000226:	801a      	strh	r2, [r3, #0]
  			                  gb_RX_Buffer_Overflow_UART2 = 1;            /* in before they could be used */
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <USART2_IRQHandler+0x98>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	e002      	b.n	8000236 <USART2_IRQHandler+0x76>
  			                }                                          /* that could cause an error!! */
  		              else
  		              {
  		            	gb_RX_Buffer_Overflow_UART2 = 0;
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <USART2_IRQHandler+0x98>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
  		              }

  		              gb_RX_No_of_byte_UART2=gb_RX_Counter_UART2 ;
 8000236:	4b07      	ldr	r3, [pc, #28]	; (8000254 <USART2_IRQHandler+0x94>)
 8000238:	881a      	ldrh	r2, [r3, #0]
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <USART2_IRQHandler+0x9c>)
 800023c:	801a      	strh	r2, [r3, #0]

  			          //printf("%d",gb_rx_byte);

                 }

}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40004400 	.word	0x40004400
 8000248:	20000654 	.word	0x20000654
 800024c:	2000024c 	.word	0x2000024c
 8000250:	20000460 	.word	0x20000460
 8000254:	20000250 	.word	0x20000250
 8000258:	2000045c 	.word	0x2000045c
 800025c:	20000252 	.word	0x20000252

08000260 <GB_getchar_UART2>:

/***********Niche Ring Buffer Functions *****/
/****reading from Interrupted Ring Buffer*/
char  GB_getchar_UART2()             // <--->   Serial.read()
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	char gb_c;
	gb_c = gb_Rx_Buffer_UART2[gb_RX_Rd_Index_UART2]; /* get one from the buffer..*/
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <GB_getchar_UART2+0x54>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	461a      	mov	r2, r3
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <GB_getchar_UART2+0x58>)
 800026e:	5c9b      	ldrb	r3, [r3, r2]
 8000270:	71fb      	strb	r3, [r7, #7]
	if(++gb_RX_Rd_Index_UART2 > gb_RX_BUFFER_SIZE_UART2) /* wrap the pointer */
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <GB_getchar_UART2+0x54>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	b29a      	uxth	r2, r3
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <GB_getchar_UART2+0x54>)
 800027c:	801a      	strh	r2, [r3, #0]
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <GB_getchar_UART2+0x54>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000286:	d902      	bls.n	800028e <GB_getchar_UART2+0x2e>
	gb_RX_Rd_Index_UART2 = 0;
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <GB_getchar_UART2+0x54>)
 800028a:	2200      	movs	r2, #0
 800028c:	801a      	strh	r2, [r3, #0]

	if(gb_RX_Counter_UART2>0) // when gb_RX_Counter_UART2 is greater then 0, it means our ring buffer has got some data
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <GB_getchar_UART2+0x5c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d007      	beq.n	80002a6 <GB_getchar_UART2+0x46>
	--gb_RX_Counter_UART2; /* keep a count (buffer size) */
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <GB_getchar_UART2+0x5c>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	b29a      	uxth	r2, r3
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <GB_getchar_UART2+0x5c>)
 80002a0:	801a      	strh	r2, [r3, #0]
	else
		{

		return NULL ;     //return NULL if no character is received
		}
	return gb_c ;//return char *
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	e000      	b.n	80002a8 <GB_getchar_UART2+0x48>
		return NULL ;     //return NULL if no character is received
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	2000024e 	.word	0x2000024e
 80002b8:	20000460 	.word	0x20000460
 80002bc:	20000250 	.word	0x20000250

080002c0 <GB_getstring_UART2>:
/*
 * tHIS FUNCTION WILL ALWAYS WILL UPDATE THE GB_rx_data_uart2 BUFFER WITH NEW VALUES
 *
 */
int GB_getstring_UART2()
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	int g = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
	uint16_t gb_x=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	807b      	strh	r3, [r7, #2]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 80002ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d2:	2100      	movs	r1, #0
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <GB_getstring_UART2+0x48>)
 80002d6:	f000 fe7d 	bl	8000fd4 <memset>
	//memset(gb_Rx_Buffer_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
	while (gb_RX_Counter_UART2)
 80002da:	e00b      	b.n	80002f4 <GB_getstring_UART2+0x34>
	{
		gb_RX_DATA_UART2[gb_x]= GB_getchar_UART2();
 80002dc:	887c      	ldrh	r4, [r7, #2]
 80002de:	f7ff ffbf 	bl	8000260 <GB_getchar_UART2>
 80002e2:	4603      	mov	r3, r0
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <GB_getstring_UART2+0x48>)
 80002e8:	551a      	strb	r2, [r3, r4]
		gb_x++;
 80002ea:	887b      	ldrh	r3, [r7, #2]
 80002ec:	3301      	adds	r3, #1
 80002ee:	807b      	strh	r3, [r7, #2]
		g = 1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
	while (gb_RX_Counter_UART2)
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <GB_getstring_UART2+0x4c>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1ef      	bne.n	80002dc <GB_getstring_UART2+0x1c>
		//return 1;
	}
	return g;
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	bf00      	nop
 8000308:	20000268 	.word	0x20000268
 800030c:	20000250 	.word	0x20000250

08000310 <GB_search_buffer>:

char* GB_search_buffer(const char* gb_search)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	char* gb_p;
	int gb_bufferlen = strlen((const char * )gb_RX_DATA_UART2);
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <GB_search_buffer+0x30>)
 800031a:	f7ff ff29 	bl	8000170 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	60bb      	str	r3, [r7, #8]
	if(gb_bufferlen < gb_RX_BUFFER_SIZE_UART2)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000328:	da04      	bge.n	8000334 <GB_search_buffer+0x24>
	gb_p= strstr ((const char *)gb_RX_DATA_UART2,gb_search);
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <GB_search_buffer+0x30>)
 800032e:	f000 fe9b 	bl	8001068 <strstr>
 8000332:	60f8      	str	r0, [r7, #12]
	//printString0(p);
	return (gb_p);
 8000334:	68fb      	ldr	r3, [r7, #12]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000268 	.word	0x20000268

08000344 <GB_send_command>:
void GB_send_command(const char * gb_command)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	GB_printString2(gb_command);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 fb4b 	bl	80009e8 <GB_printString2>

}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <GB_RFR_UART2>:

int GB_RFR_UART2(const char * gb_rsp,unsigned int gb_timeout)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	unsigned long gb_timeIn = GB_millis();	// Timestamp coming into function
 8000366:	f000 f9bd 	bl	80006e4 <GB_millis>
 800036a:	60b8      	str	r0, [r7, #8]
	uint16_t gb_received = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	81fb      	strh	r3, [r7, #14]
	memset(gb_RX_DATA_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 8000370:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000374:	2100      	movs	r1, #0
 8000376:	4817      	ldr	r0, [pc, #92]	; (80003d4 <GB_RFR_UART2+0x78>)
 8000378:	f000 fe2c 	bl	8000fd4 <memset>
	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 800037c:	e018      	b.n	80003b0 <GB_RFR_UART2+0x54>
	{

		if(gb_RX_Counter_UART2)
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <GB_RFR_UART2+0x7c>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d014      	beq.n	80003b0 <GB_RFR_UART2+0x54>
		{
			gb_RX_DATA_UART2[gb_received]= GB_getchar_UART2();
 8000386:	89fc      	ldrh	r4, [r7, #14]
 8000388:	f7ff ff6a 	bl	8000260 <GB_getchar_UART2>
 800038c:	4603      	mov	r3, r0
 800038e:	461a      	mov	r2, r3
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <GB_RFR_UART2+0x78>)
 8000392:	551a      	strb	r2, [r3, r4]

			gb_received++;
 8000394:	89fb      	ldrh	r3, [r7, #14]
 8000396:	3301      	adds	r3, #1
 8000398:	81fb      	strh	r3, [r7, #14]
			if(GB_search_buffer(gb_rsp))                      // as if get the data which we want on the received buffer
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ffb8 	bl	8000310 <GB_search_buffer>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d004      	beq.n	80003b0 <GB_RFR_UART2+0x54>
				{

				gb_RX_Counter_UART2 = 0;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <GB_RFR_UART2+0x7c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	801a      	strh	r2, [r3, #0]
				return 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	e00d      	b.n	80003cc <GB_RFR_UART2+0x70>
	while (GB_millis() - gb_timeIn < gb_timeout) // While we haven't timed out
 80003b0:	f000 f998 	bl	80006e4 <GB_millis>
 80003b4:	4602      	mov	r2, r0
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d8de      	bhi.n	800037e <GB_RFR_UART2+0x22>
				}

		}
	}
	if (gb_received > 0) // If we received any characters
 80003c0:	89fb      	ldrh	r3, [r7, #14]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <GB_RFR_UART2+0x6e>
	return gb_received; // Return unkown response error code
 80003c6:	89fb      	ldrh	r3, [r7, #14]
 80003c8:	e000      	b.n	80003cc <GB_RFR_UART2+0x70>
	else // If we haven't received any characters
	return 2; // Return the timeout error code
 80003ca:	2302      	movs	r3, #2

}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd90      	pop	{r4, r7, pc}
 80003d4:	20000268 	.word	0x20000268
 80003d8:	20000250 	.word	0x20000250

080003dc <GB_getstring_ESP8266FORSERVER>:
		uint8_t gb_x=0;

//Function to wait for client to browse Ip address on Browser
//gb_flag is Parameter which
uint32_t GB_getstring_ESP8266FORSERVER(char* gb_IP)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

	do 
	{

		//GB_printString1("\n");
		GB_printString1(gb_RX_DATA_UART2);
 80003e4:	4825      	ldr	r0, [pc, #148]	; (800047c <GB_getstring_ESP8266FORSERVER+0xa0>)
 80003e6:	f000 fa13 	bl	8000810 <GB_printString1>

		//Gets the updates data if client is connected
		GB_getstring_UART2();
 80003ea:	f7ff ff69 	bl	80002c0 <GB_getstring_UART2>

		gb_p= strstr(gb_RX_DATA_UART2,"Host");  // when using client as web browser
 80003ee:	4924      	ldr	r1, [pc, #144]	; (8000480 <GB_getstring_ESP8266FORSERVER+0xa4>)
 80003f0:	4822      	ldr	r0, [pc, #136]	; (800047c <GB_getstring_ESP8266FORSERVER+0xa0>)
 80003f2:	f000 fe39 	bl	8001068 <strstr>
 80003f6:	4602      	mov	r2, r0
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <GB_getstring_ESP8266FORSERVER+0xa8>)
 80003fa:	601a      	str	r2, [r3, #0]
		 //gb_p= strstr(gb_RX_DATA_UART2,"CONNECT"); // when using client as TCP from herculus or other esp8266 node
		if(gb_p)    //IF Client is connected
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <GB_getstring_ESP8266FORSERVER+0xa8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d031      	beq.n	8000468 <GB_getstring_ESP8266FORSERVER+0x8c>
		{
			gb_flag=1;
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <GB_getstring_ESP8266FORSERVER+0xac>)
 8000406:	2201      	movs	r2, #1
 8000408:	601a      	str	r2, [r3, #0]
 			GB_printString1(gb_RX_DATA_UART2);
 800040a:	481c      	ldr	r0, [pc, #112]	; (800047c <GB_getstring_ESP8266FORSERVER+0xa0>)
 800040c:	f000 fa00 	bl	8000810 <GB_printString1>
			GB_printString1("\n*******Client Connected*******\n");
 8000410:	481e      	ldr	r0, [pc, #120]	; (800048c <GB_getstring_ESP8266FORSERVER+0xb0>)
 8000412:	f000 f9fd 	bl	8000810 <GB_printString1>
			gb_q = strstr(gb_RX_DATA_UART2,"+IPD");
 8000416:	491e      	ldr	r1, [pc, #120]	; (8000490 <GB_getstring_ESP8266FORSERVER+0xb4>)
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <GB_getstring_ESP8266FORSERVER+0xa0>)
 800041a:	f000 fe25 	bl	8001068 <strstr>
 800041e:	4602      	mov	r2, r0
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <GB_getstring_ESP8266FORSERVER+0xb8>)
 8000422:	601a      	str	r2, [r3, #0]
			gb_q += strlen("+IPD");
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <GB_getstring_ESP8266FORSERVER+0xb8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3304      	adds	r3, #4
 800042a:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <GB_getstring_ESP8266FORSERVER+0xb8>)
 800042c:	6013      	str	r3, [r2, #0]
			gb_channelid = *(gb_q+1);
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <GB_getstring_ESP8266FORSERVER+0xb8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <GB_getstring_ESP8266FORSERVER+0xbc>)
 800043a:	601a      	str	r2, [r3, #0]
			GB_printString1("Channel ID with Client is:");
 800043c:	4817      	ldr	r0, [pc, #92]	; (800049c <GB_getstring_ESP8266FORSERVER+0xc0>)
 800043e:	f000 f9e7 	bl	8000810 <GB_printString1>
			GB_UART_TxChar1(gb_channelid);
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <GB_getstring_ESP8266FORSERVER+0xbc>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f9cc 	bl	80007e4 <GB_UART_TxChar1>
			gb_flag=1;
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <GB_getstring_ESP8266FORSERVER+0xac>)
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
			GB_printString1("\n");
 8000452:	4813      	ldr	r0, [pc, #76]	; (80004a0 <GB_getstring_ESP8266FORSERVER+0xc4>)
 8000454:	f000 f9dc 	bl	8000810 <GB_printString1>
			memset(gb_Rx_Buffer_UART2, '\0',gb_RX_BUFFER_SIZE_UART2);
 8000458:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800045c:	2100      	movs	r1, #0
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <GB_getstring_ESP8266FORSERVER+0xc8>)
 8000460:	f000 fdb8 	bl	8000fd4 <memset>
			return 1;
 8000464:	2301      	movs	r3, #1
 8000466:	e004      	b.n	8000472 <GB_getstring_ESP8266FORSERVER+0x96>
		}


	}while (gb_flag==0);
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <GB_getstring_ESP8266FORSERVER+0xac>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0b9      	beq.n	80003e4 <GB_getstring_ESP8266FORSERVER+0x8>
		
	
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000268 	.word	0x20000268
 8000480:	08001898 	.word	0x08001898
 8000484:	20000884 	.word	0x20000884
 8000488:	20000254 	.word	0x20000254
 800048c:	080018a0 	.word	0x080018a0
 8000490:	080018c4 	.word	0x080018c4
 8000494:	2000068c 	.word	0x2000068c
 8000498:	20000888 	.word	0x20000888
 800049c:	080018cc 	.word	0x080018cc
 80004a0:	080018e8 	.word	0x080018e8
 80004a4:	20000460 	.word	0x20000460

080004a8 <GB_esp8266_serverdatatoclientcipsend>:
//function to find length of data to send
//Function to send AT+CIPSEND command
char gb_send[50];

void GB_esp8266_serverdatatoclientcipsend()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	GB_printString1("\n****Sending details of data to be send (AT+CIPSEND)********\n");
 80004ae:	4814      	ldr	r0, [pc, #80]	; (8000500 <GB_esp8266_serverdatatoclientcipsend+0x58>)
 80004b0:	f000 f9ae 	bl	8000810 <GB_printString1>
	int gb_get_command_length = strlen(gb_signMessage);
 80004b4:	4813      	ldr	r0, [pc, #76]	; (8000504 <GB_esp8266_serverdatatoclientcipsend+0x5c>)
 80004b6:	f7ff fe5b 	bl	8000170 <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	607b      	str	r3, [r7, #4]
	sprintf(gb_send,"AT+CIPSEND=%i,%u\r\n",gb_channelid-48,gb_get_command_length+2);
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <GB_esp8266_serverdatatoclientcipsend+0x60>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	4910      	ldr	r1, [pc, #64]	; (800050c <GB_esp8266_serverdatatoclientcipsend+0x64>)
 80004cc:	4810      	ldr	r0, [pc, #64]	; (8000510 <GB_esp8266_serverdatatoclientcipsend+0x68>)
 80004ce:	f000 fd89 	bl	8000fe4 <siprintf>

	GB_printString1("Channel id is :");
 80004d2:	4810      	ldr	r0, [pc, #64]	; (8000514 <GB_esp8266_serverdatatoclientcipsend+0x6c>)
 80004d4:	f000 f99c 	bl	8000810 <GB_printString1>
	GB_UART_TxChar1(gb_channelid);
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <GB_esp8266_serverdatatoclientcipsend+0x60>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f981 	bl	80007e4 <GB_UART_TxChar1>


	GB_send_command(gb_send);
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <GB_esp8266_serverdatatoclientcipsend+0x68>)
 80004e4:	f7ff ff2e 	bl	8000344 <GB_send_command>

	GB_RFR_UART2(">",2000);
 80004e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <GB_esp8266_serverdatatoclientcipsend+0x70>)
 80004ee:	f7ff ff35 	bl	800035c <GB_RFR_UART2>
	GB_printString1(gb_RX_DATA_UART2);
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <GB_esp8266_serverdatatoclientcipsend+0x74>)
 80004f4:	f000 f98c 	bl	8000810 <GB_printString1>
	
	
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	080018ec 	.word	0x080018ec
 8000504:	20000000 	.word	0x20000000
 8000508:	20000888 	.word	0x20000888
 800050c:	0800192c 	.word	0x0800192c
 8000510:	20000658 	.word	0x20000658
 8000514:	08001940 	.word	0x08001940
 8000518:	08001950 	.word	0x08001950
 800051c:	20000268 	.word	0x20000268

08000520 <GB_esp8266_webpagedata>:
uint8_t webdata_debug = 0;
void GB_esp8266_webpagedata()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	webdata_debug = 1;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <GB_esp8266_webpagedata+0x58>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
	GB_printString1("\n************Sending Data to Client************\n");
 800052c:	4813      	ldr	r0, [pc, #76]	; (800057c <GB_esp8266_webpagedata+0x5c>)
 800052e:	f000 f96f 	bl	8000810 <GB_printString1>
	GB_send_command(gb_signMessage);
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <GB_esp8266_webpagedata+0x60>)
 8000534:	f7ff ff06 	bl	8000344 <GB_send_command>
	GB_decimel1(GB_RFR_UART2("SEND OK",2000));
 8000538:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <GB_esp8266_webpagedata+0x64>)
 800053e:	f7ff ff0d 	bl	800035c <GB_RFR_UART2>
 8000542:	4603      	mov	r3, r0
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f981 	bl	800084c <GB_decimel1>
	int gb_rsp = GB_RFR_UART2("SEND OK",2000);
 800054a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <GB_esp8266_webpagedata+0x64>)
 8000550:	f7ff ff04 	bl	800035c <GB_RFR_UART2>
 8000554:	6078      	str	r0, [r7, #4]
	if (gb_rsp==1) GB_printString1(gb_RX_DATA_UART2);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d102      	bne.n	8000562 <GB_esp8266_webpagedata+0x42>
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <GB_esp8266_webpagedata+0x68>)
 800055e:	f000 f957 	bl	8000810 <GB_printString1>
	GB_printString1(gb_signMessage);
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <GB_esp8266_webpagedata+0x60>)
 8000564:	f000 f954 	bl	8000810 <GB_printString1>
	webdata_debug = 0;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <GB_esp8266_webpagedata+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000258 	.word	0x20000258
 800057c:	08001954 	.word	0x08001954
 8000580:	20000000 	.word	0x20000000
 8000584:	08001988 	.word	0x08001988
 8000588:	20000268 	.word	0x20000268

0800058c <GB_esp8266_webpageclose>:
void GB_esp8266_webpageclose()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
	//GB_printString1(gb_RX_DATA_UART2);
	
	GB_printString1("\n****************Closing the session with Client**************\n");
 8000592:	4812      	ldr	r0, [pc, #72]	; (80005dc <GB_esp8266_webpageclose+0x50>)
 8000594:	f000 f93c 	bl	8000810 <GB_printString1>
	char gb_cipclose[20];
	sprintf(gb_cipclose,"AT+CIPCLOSE=%u\r\n",gb_channelid-48);
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <GB_esp8266_webpageclose+0x54>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005a0:	463b      	mov	r3, r7
 80005a2:	4910      	ldr	r1, [pc, #64]	; (80005e4 <GB_esp8266_webpageclose+0x58>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fd1d 	bl	8000fe4 <siprintf>
	
	GB_send_command(gb_cipclose);
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fec9 	bl	8000344 <GB_send_command>
	GB_printString1(gb_cipclose);
 80005b2:	463b      	mov	r3, r7
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f92b 	bl	8000810 <GB_printString1>
	int gb_rsp = GB_RFR_UART2("OK",1000);
 80005ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <GB_esp8266_webpageclose+0x5c>)
 80005c0:	f7ff fecc 	bl	800035c <GB_RFR_UART2>
 80005c4:	6178      	str	r0, [r7, #20]
	if (gb_rsp==1) //GB_printString1(gb_RX_DATA_UART2);
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <GB_esp8266_webpageclose+0x46>
	GB_printString1(gb_RX_DATA_UART2);
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <GB_esp8266_webpageclose+0x60>)
 80005ce:	f000 f91f 	bl	8000810 <GB_printString1>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08001990 	.word	0x08001990
 80005e0:	20000888 	.word	0x20000888
 80005e4:	080019d0 	.word	0x080019d0
 80005e8:	080019e4 	.word	0x080019e4
 80005ec:	20000268 	.word	0x20000268

080005f0 <__NVIC_SetPriorityGrouping>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800069c:	d301      	bcc.n	80006a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2301      	movs	r3, #1
 80006a0:	e00a      	b.n	80006b8 <SysTick_Config+0x2c>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <SysTick_Config+0x38>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	6053      	str	r3, [r2, #4]
//  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SysTick_Config+0x38>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <SysTick_Config+0x38>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <SysTick_Handler>:
//variable for millis counter
volatile uint32_t GB_counter;


void SysTick_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	//GB_printString1("gup\n");
  GB_counter++;    // equivalent to HAL_IncTick(void)
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SysTick_Handler+0x18>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <SysTick_Handler+0x18>)
 80006d4:	6013      	str	r3, [r2, #0]
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000088c 	.word	0x2000088c

080006e4 <GB_millis>:


//equivalent to  HAL_GetTick(void)
uint32_t GB_millis()
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	//GB_printString1("kun\n");
  return GB_counter;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <GB_millis+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	2000088c 	.word	0x2000088c

080006f8 <systick_millis>:

void systick_millis(uint32_t clk_val)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <systick_millis+0x34>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a09      	ldr	r2, [pc, #36]	; (800072c <systick_millis+0x34>)
 8000706:	f043 0312 	orr.w	r3, r3, #18
 800070a:	6013      	str	r3, [r2, #0]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ff6f 	bl	80005f0 <__NVIC_SetPriorityGrouping>
	SysTick_Config(clk_val);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff ffba 	bl	800068c <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,0);
 8000718:	2100      	movs	r1, #0
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f7ff ff8b 	bl	8000638 <__NVIC_SetPriority>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <GB_uart_pin_conf1>:

#include <GB_uart.h>
/**************STM32 UART1 ******************/
//PA10- RX, PA9-TX
void GB_uart_pin_conf1()
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <GB_uart_pin_conf1+0x48>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <GB_uart_pin_conf1+0x48>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6193      	str	r3, [r2, #24]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <GB_uart_pin_conf1+0x48>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <GB_uart_pin_conf1+0x48>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA9 as output*/
	 GPIOA->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0);
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <GB_uart_pin_conf1+0x4c>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <GB_uart_pin_conf1+0x4c>)
 8000752:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000756:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH |= (GPIO_CRH_CNF9_1);
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <GB_uart_pin_conf1+0x4c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <GB_uart_pin_conf1+0x4c>)
 800075e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000762:	6053      	str	r3, [r2, #4]
	 GPIOA->CRH &= ~(GPIO_CRH_CNF9_0);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <GB_uart_pin_conf1+0x4c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <GB_uart_pin_conf1+0x4c>)
 800076a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800076e:	6053      	str	r3, [r2, #4]
	 /*
	   * PIN PA10 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <GB_uart_boud_rate1>:

void GB_uart_boud_rate1()
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	//DIV_Fraction = 0.36*16 = 0d5.76 = 0d6 (Nearest Whole number) = 0x6
	//DIV_Mantissa = 0d17 = 0x11
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
    // USART1->BRR = 0x116;
	USART1->BRR = 0xd05;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <GB_uart_boud_rate1+0x14>)
 8000786:	f640 5205 	movw	r2, #3333	; 0xd05
 800078a:	609a      	str	r2, [r3, #8]

}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40013800 	.word	0x40013800

08000798 <GB_uart_init1>:
void GB_uart_init1()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	GB_uart_pin_conf1();
 800079c:	f7ff ffc8 	bl	8000730 <GB_uart_pin_conf1>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART1->CR1 = 0x0000;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <GB_uart_init1+0x48>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART1->CR1 |= USART_CR1_UE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <GB_uart_init1+0x48>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <GB_uart_init1+0x48>)
 80007ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007b0:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_M;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <GB_uart_init1+0x48>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <GB_uart_init1+0x48>)
 80007b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007bc:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	//USART1->CR1 |= USART_CR1_RXNEIE;

	//enable transmitter
	USART1->CR1 |= USART_CR1_TE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <GB_uart_init1+0x48>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <GB_uart_init1+0x48>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART1->CR1 |= USART_CR1_RE;
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <GB_uart_init1+0x48>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <GB_uart_init1+0x48>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate1();
 80007d6:	f7ff ffd3 	bl	8000780 <GB_uart_boud_rate1>


}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40013800 	.word	0x40013800

080007e4 <GB_UART_TxChar1>:
void GB_UART_TxChar1(uint32_t gb_byte)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	while(!(USART1->SR & USART_SR_TXE));
 80007ec:	bf00      	nop
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <GB_UART_TxChar1+0x28>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0f9      	beq.n	80007ee <GB_UART_TxChar1+0xa>
	USART1->DR = gb_byte;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <GB_UART_TxChar1+0x28>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6053      	str	r3, [r2, #4]

}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40013800 	.word	0x40013800

08000810 <GB_printString1>:
{
	while(!(USART2->SR & USART_SR_RXNE));
	return USART2->DR;
}
void GB_printString1(const char *gb_myString)      /////to print any string
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 8000818:	e006      	b.n	8000828 <GB_printString1+0x18>
	GB_UART_TxChar1(*gb_myString++);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffde 	bl	80007e4 <GB_UART_TxChar1>
	while (*gb_myString)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f4      	bne.n	800081a <GB_printString1+0xa>
	while(!(USART1->SR & USART_SR_TC));
 8000830:	bf00      	nop
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <GB_printString1+0x38>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <GB_printString1+0x22>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40013800 	.word	0x40013800

0800084c <GB_decimel1>:
			GB_UART_TxChar1('1');
		}
	}
}
void GB_decimel1(uint32_t gb_val)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	unsigned char gb_buf[5];
	int8_t gb_ptr;
	for(gb_ptr=0;gb_ptr<5;++gb_ptr)
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e01d      	b.n	8000896 <GB_decimel1+0x4a>
	{
		gb_buf[gb_ptr] = (gb_val % 10) + '0';
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <GB_decimel1+0xac>)
 800085e:	fba3 2301 	umull	r2, r3, r3, r1
 8000862:	08da      	lsrs	r2, r3, #3
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	1aca      	subs	r2, r1, r3
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000874:	3230      	adds	r2, #48	; 0x30
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	f107 0110 	add.w	r1, r7, #16
 800087c:	440b      	add	r3, r1
 800087e:	f803 2c08 	strb.w	r2, [r3, #-8]
		gb_val /= 10;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <GB_decimel1+0xac>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	607b      	str	r3, [r7, #4]
	for(gb_ptr=0;gb_ptr<5;++gb_ptr)
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	2b04      	cmp	r3, #4
 800089c:	dddd      	ble.n	800085a <GB_decimel1+0xe>
	}
	for(gb_ptr=4;gb_ptr>0;--gb_ptr)
 800089e:	2304      	movs	r3, #4
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e00c      	b.n	80008be <GB_decimel1+0x72>
	{
		if (gb_buf[gb_ptr] != '0')
 80008a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	4413      	add	r3, r2
 80008ae:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008b2:	2b30      	cmp	r3, #48	; 0x30
 80008b4:	d108      	bne.n	80008c8 <GB_decimel1+0x7c>
	for(gb_ptr=4;gb_ptr>0;--gb_ptr)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dcee      	bgt.n	80008a4 <GB_decimel1+0x58>
 80008c6:	e00f      	b.n	80008e8 <GB_decimel1+0x9c>
		break;
 80008c8:	bf00      	nop
	}
	for(;gb_ptr>=0;--gb_ptr)
 80008ca:	e00d      	b.n	80008e8 <GB_decimel1+0x9c>
	{
		GB_UART_TxChar1(gb_buf[gb_ptr]);
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	4413      	add	r3, r2
 80008d6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff82 	bl	80007e4 <GB_UART_TxChar1>
	for(;gb_ptr>=0;--gb_ptr)
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	daed      	bge.n	80008cc <GB_decimel1+0x80>
	}
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	cccccccd 	.word	0xcccccccd

080008fc <GB_uart_pin_conf2>:


//************************STM32- UART2 functions*******************//
//PA3- RX, PA2-TX
void GB_uart_pin_conf2()
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	// enable bus clock
	 RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <GB_uart_pin_conf2+0x48>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <GB_uart_pin_conf2+0x48>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	61d3      	str	r3, [r2, #28]
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <GB_uart_pin_conf2+0x48>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <GB_uart_pin_conf2+0x48>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]

     //TX pin as alternate push pull
	 /* PA2 as output*/
	 GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 800091e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000922:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL |= (GPIO_CRL_CNF2_1);
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 800092a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092e:	6013      	str	r3, [r2, #0]
	 GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <GB_uart_pin_conf2+0x4c>)
 8000936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
	 /*
	   * PIN PA3 is the RX pin and it has to be set to input &FLOATING
	   * this is the rest value of the pin so we dont do anything to it
	   *
	   * */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000
 8000948:	40010800 	.word	0x40010800

0800094c <GB_uart_boud_rate2>:

void GB_uart_boud_rate2()
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	//usartdiv = 0d208.33
	//DIV_Fraction = 0.33*16 = 0d5.28 = 0d5(Nearest whole number) = 0x5
	//DIV_Mantissa = 0d208 = 0xd0
	//USART2->BRR =  ( ( uartdiv / 16 ) << USART_BRR_DIV_Mantissa_Pos );
	//USART2->BRR =  ( ( uartdiv % 16 ) << USART_BRR_DIV_Fraction_Pos ) ;
     USART2->BRR = 0x116;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <GB_uart_boud_rate2+0x14>)
 8000952:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000956:	609a      	str	r2, [r3, #8]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40004400 	.word	0x40004400

08000964 <GB_uart_init2>:
void GB_uart_init2()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	GB_uart_pin_conf2();
 8000968:	f7ff ffc8 	bl	80008fc <GB_uart_pin_conf2>
	//Alternate pin register
	/* no remap rx tx pins, for UART at pa2(tx) and pa3(rx)*/
    USART2->CR1 = 0x0000;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <GB_uart_init2+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
	//enable UART and configure stop byte
	USART2->CR1 |= USART_CR1_UE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <GB_uart_init2+0x54>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <GB_uart_init2+0x54>)
 8000978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &= ~USART_CR1_M;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <GB_uart_init2+0x54>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <GB_uart_init2+0x54>)
 8000984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000988:	60d3      	str	r3, [r2, #12]

	 //enable RXNE interrupts on USART SIDE
	USART2->CR1 |= USART_CR1_RXNEIE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <GB_uart_init2+0x54>)
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <GB_uart_init2+0x54>)
 8000990:	f043 0320 	orr.w	r3, r3, #32
 8000994:	60d3      	str	r3, [r2, #12]

	//enable transmitter
	USART2->CR1 |= USART_CR1_TE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <GB_uart_init2+0x54>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <GB_uart_init2+0x54>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	60d3      	str	r3, [r2, #12]
	//enable receiver
	USART2->CR1 |= USART_CR1_RE;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <GB_uart_init2+0x54>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <GB_uart_init2+0x54>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	60d3      	str	r3, [r2, #12]


    GB_uart_boud_rate2();
 80009ae:	f7ff ffcd 	bl	800094c <GB_uart_boud_rate2>


}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400

080009bc <GB_UART_TxChar2>:
void GB_UART_TxChar2(uint32_t gb_byte)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & USART_SR_TXE));
 80009c4:	bf00      	nop
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <GB_UART_TxChar2+0x28>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <GB_UART_TxChar2+0xa>
	USART2->DR = gb_byte;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <GB_UART_TxChar2+0x28>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6053      	str	r3, [r2, #4]

}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400

080009e8 <GB_printString2>:

void GB_printString2(const char *gb_myString)      /////to print any string
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	while (*gb_myString)
 80009f0:	e006      	b.n	8000a00 <GB_printString2+0x18>
	GB_UART_TxChar2(*gb_myString++);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffde 	bl	80009bc <GB_UART_TxChar2>
	while (*gb_myString)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f4      	bne.n	80009f2 <GB_printString2+0xa>
	while(!(USART2->SR & USART_SR_TC));
 8000a08:	bf00      	nop
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <GB_printString2+0x38>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f9      	beq.n	8000a0a <GB_printString2+0x22>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400

08000a24 <__NVIC_EnableIRQ>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4906      	ldr	r1, [pc, #24]	; (8000a58 <__NVIC_EnableIRQ+0x34>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000ab6:	4b70      	ldr	r3, [pc, #448]	; (8000c78 <main+0x1c8>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a6f      	ldr	r2, [pc, #444]	; (8000c78 <main+0x1c8>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
		AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 8000ac2:	4b6e      	ldr	r3, [pc, #440]	; (8000c7c <main+0x1cc>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a6d      	ldr	r2, [pc, #436]	; (8000c7c <main+0x1cc>)
 8000ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000acc:	6053      	str	r3, [r2, #4]


		systick_millis(32000);
 8000ace:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000ad2:	f7ff fe11 	bl	80006f8 <systick_millis>
		system_clk();
 8000ad6:	f000 f913 	bl	8000d00 <system_clk>
		timer_initialise();
 8000ada:	f000 f99f 	bl	8000e1c <timer_initialise>
		//terminal
		GB_uart_init1();
 8000ade:	f7ff fe5b 	bl	8000798 <GB_uart_init1>
		GB_printString1("\nSTM32 ESP8266 as webserver Device Driver\n");
 8000ae2:	4867      	ldr	r0, [pc, #412]	; (8000c80 <main+0x1d0>)
 8000ae4:	f7ff fe94 	bl	8000810 <GB_printString1>
		GB_printString1("\nKunal Gupta\n");
 8000ae8:	4866      	ldr	r0, [pc, #408]	; (8000c84 <main+0x1d4>)
 8000aea:	f7ff fe91 	bl	8000810 <GB_printString1>
		//ESP8266
		GB_uart_init2();
 8000aee:	f7ff ff39 	bl	8000964 <GB_uart_init2>
		__NVIC_EnableIRQ(USART2_IRQn);
 8000af2:	2026      	movs	r0, #38	; 0x26
 8000af4:	f7ff ff96 	bl	8000a24 <__NVIC_EnableIRQ>
		__NVIC_SetPriority (USART2_IRQn, 1);
 8000af8:	2101      	movs	r1, #1
 8000afa:	2026      	movs	r0, #38	; 0x26
 8000afc:	f7ff ffae 	bl	8000a5c <__NVIC_SetPriority>

		int gb_c=0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
     *
     * */
		while(1)
		{

			if(gb_c<1)
 8000b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f300 8089 	bgt.w	8000c1e <main+0x16e>
               {
                   //Configure as Station
                   GB_send_command("AT+CWMODE=1\r\n");
 8000b0c:	485e      	ldr	r0, [pc, #376]	; (8000c88 <main+0x1d8>)
 8000b0e:	f7ff fc19 	bl	8000344 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b16:	485d      	ldr	r0, [pc, #372]	; (8000c8c <main+0x1dc>)
 8000b18:	f7ff fc20 	bl	800035c <GB_RFR_UART2>
                   GB_printString1(gb_RX_DATA_UART2);
 8000b1c:	485c      	ldr	r0, [pc, #368]	; (8000c90 <main+0x1e0>)
 8000b1e:	f7ff fe77 	bl	8000810 <GB_printString1>
                   GB_printString1("\n");
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <main+0x1e4>)
 8000b24:	f7ff fe74 	bl	8000810 <GB_printString1>

//                   GB_printString1("\n");
//                   GB_decimel1(gb_RX_No_of_byte_UART2);

                   //Start Multiple connection
                   GB_send_command("AT+CIPMUX=1\r\n");
 8000b28:	485b      	ldr	r0, [pc, #364]	; (8000c98 <main+0x1e8>)
 8000b2a:	f7ff fc0b 	bl	8000344 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b32:	4856      	ldr	r0, [pc, #344]	; (8000c8c <main+0x1dc>)
 8000b34:	f7ff fc12 	bl	800035c <GB_RFR_UART2>
                   GB_printString1(gb_RX_DATA_UART2);
 8000b38:	4855      	ldr	r0, [pc, #340]	; (8000c90 <main+0x1e0>)
 8000b3a:	f7ff fe69 	bl	8000810 <GB_printString1>
                   GB_printString1("\n");
 8000b3e:	4855      	ldr	r0, [pc, #340]	; (8000c94 <main+0x1e4>)
 8000b40:	f7ff fe66 	bl	8000810 <GB_printString1>
//                   GB_printString1(gb_Rx_Buffer_UART2);

//                   GB_printString1("\n");
//                   GB_decimel1(gb_RX_No_of_byte_UART2);

                   GB_send_command("AT+CIPSERVER=1,80\r\n");
 8000b44:	4855      	ldr	r0, [pc, #340]	; (8000c9c <main+0x1ec>)
 8000b46:	f7ff fbfd 	bl	8000344 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b4e:	484f      	ldr	r0, [pc, #316]	; (8000c8c <main+0x1dc>)
 8000b50:	f7ff fc04 	bl	800035c <GB_RFR_UART2>
                   GB_printString1(gb_RX_DATA_UART2);
 8000b54:	484e      	ldr	r0, [pc, #312]	; (8000c90 <main+0x1e0>)
 8000b56:	f7ff fe5b 	bl	8000810 <GB_printString1>
                   GB_printString1("\n");
 8000b5a:	484e      	ldr	r0, [pc, #312]	; (8000c94 <main+0x1e4>)
 8000b5c:	f7ff fe58 	bl	8000810 <GB_printString1>

//                   GB_printString1("\n");
//                   GB_decimel1(gb_RX_No_of_byte_UART2);


                   GB_send_command("AT+CWJAP?\r\n");
 8000b60:	484f      	ldr	r0, [pc, #316]	; (8000ca0 <main+0x1f0>)
 8000b62:	f7ff fbef 	bl	8000344 <GB_send_command>
                   GB_RFR_UART2("OK",1000);
 8000b66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b6a:	4848      	ldr	r0, [pc, #288]	; (8000c8c <main+0x1dc>)
 8000b6c:	f7ff fbf6 	bl	800035c <GB_RFR_UART2>
                   GB_printString1(gb_RX_DATA_UART2);
 8000b70:	4847      	ldr	r0, [pc, #284]	; (8000c90 <main+0x1e0>)
 8000b72:	f7ff fe4d 	bl	8000810 <GB_printString1>
                   GB_printString1("\n");
 8000b76:	4847      	ldr	r0, [pc, #284]	; (8000c94 <main+0x1e4>)
 8000b78:	f7ff fe4a 	bl	8000810 <GB_printString1>
//                   GB_printString1("\n");
//                   GB_decimel1(gb_RX_No_of_byte_UART2);

	              //  Connect To wifi
                   //GB_send_command("AT+CWJAP=\"Kunal\",\"Pottypotty12\"\r\n");
                   GB_send_command("AT+CWJAP=\"JioFiber 2.4ghz\",\"Mansi5481\"\r\n");
 8000b7c:	4849      	ldr	r0, [pc, #292]	; (8000ca4 <main+0x1f4>)
 8000b7e:	f7ff fbe1 	bl	8000344 <GB_send_command>
                  //  GB_send_command("AT+CWJAP=\"LALIT\",\"POTTYPOTTY\"\r\n");
                    GB_RFR_UART2("OK",10000);
 8000b82:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b86:	4841      	ldr	r0, [pc, #260]	; (8000c8c <main+0x1dc>)
 8000b88:	f7ff fbe8 	bl	800035c <GB_RFR_UART2>
                    GB_printString1(gb_RX_DATA_UART2);
 8000b8c:	4840      	ldr	r0, [pc, #256]	; (8000c90 <main+0x1e0>)
 8000b8e:	f7ff fe3f 	bl	8000810 <GB_printString1>
                    GB_printString1("\n");
 8000b92:	4840      	ldr	r0, [pc, #256]	; (8000c94 <main+0x1e4>)
 8000b94:	f7ff fe3c 	bl	8000810 <GB_printString1>
               //     GB_printString1(gb_Rx_Buffer_UART2);
//                    GB_printString1("\n");
//                    GB_decimel1(gb_RX_No_of_byte_UART2);


                    GB_send_command("AT+CIFSR\r\n");
 8000b98:	4843      	ldr	r0, [pc, #268]	; (8000ca8 <main+0x1f8>)
 8000b9a:	f7ff fbd3 	bl	8000344 <GB_send_command>
                    GB_RFR_UART2("OK",1000);
 8000b9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba2:	483a      	ldr	r0, [pc, #232]	; (8000c8c <main+0x1dc>)
 8000ba4:	f7ff fbda 	bl	800035c <GB_RFR_UART2>
                    GB_printString1(gb_RX_DATA_UART2);
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <main+0x1e0>)
 8000baa:	f7ff fe31 	bl	8000810 <GB_printString1>
                    GB_printString1("\n");
 8000bae:	4839      	ldr	r0, [pc, #228]	; (8000c94 <main+0x1e4>)
 8000bb0:	f7ff fe2e 	bl	8000810 <GB_printString1>
                   // GB_printString1(gb_Rx_Buffer_UART2);
//                    GB_printString1("\n");
//                    GB_decimel1(gb_RX_No_of_byte_UART2);


                      memset(gb_staip, '\0',sizeof(gb_staip));
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2214      	movs	r2, #20
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fa09 	bl	8000fd4 <memset>
                      memset(gb_stamac, '\0',sizeof(gb_stamac));
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2214      	movs	r2, #20
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fa03 	bl	8000fd4 <memset>
                      char * gb_p = strstr(gb_RX_DATA_UART2,"+CIFSR:STAIP");
 8000bce:	4937      	ldr	r1, [pc, #220]	; (8000cac <main+0x1fc>)
 8000bd0:	482f      	ldr	r0, [pc, #188]	; (8000c90 <main+0x1e0>)
 8000bd2:	f000 fa49 	bl	8001068 <strstr>
 8000bd6:	6338      	str	r0, [r7, #48]	; 0x30
                      gb_p += strlen("+CWJAP:STAIP")+2;
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	330e      	adds	r3, #14
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
                      char * gb_q=strchr(gb_p,'"');
 8000bde:	2122      	movs	r1, #34	; 0x22
 8000be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000be2:	f000 fa1f 	bl	8001024 <strchr>
 8000be6:	62f8      	str	r0, [r7, #44]	; 0x2c
                       strncpy(gb_staip,gb_p,gb_q-gb_p);
 8000be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fa21 	bl	800103e <strncpy>

                        // GB_send_command("AT+CIPSTO?\r\n");
                         // GB_getstring_UART2();


                        gb_c++;
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	3301      	adds	r3, #1
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34

                         GB_printString1("\n***********Waiting For Client to connect********\n");
 8000c02:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <main+0x200>)
 8000c04:	f7ff fe04 	bl	8000810 <GB_printString1>
                         GB_printString1("Browse IP address on the local Web-Browser:");
 8000c08:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <main+0x204>)
 8000c0a:	f7ff fe01 	bl	8000810 <GB_printString1>
                         GB_printString1(gb_staip);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fdfc 	bl	8000810 <GB_printString1>
                         GB_printString1("\n");
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <main+0x1e4>)
 8000c1a:	f7ff fdf9 	bl	8000810 <GB_printString1>

               }

			//GB_printString1("Kunal");

			uint8_t gb_g=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			gb_g = GB_getstring_ESP8266FORSERVER(gb_staip);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fbd7 	bl	80003dc <GB_getstring_ESP8266FORSERVER>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			GB_decimel1(strlen(gb_Rx_Buffer_UART2));
 8000c34:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <main+0x208>)
 8000c36:	f7ff fa9b 	bl	8000170 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe05 	bl	800084c <GB_decimel1>

			delay_us(100);
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f000 f93e 	bl	8000ec4 <delay_us>

				if(gb_g==1)
 8000c48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d10e      	bne.n	8000c6e <main+0x1be>
				{
				GB_esp8266_serverdatatoclientcipsend();
 8000c50:	f7ff fc2a 	bl	80004a8 <GB_esp8266_serverdatatoclientcipsend>
				delay_ms(200);
 8000c54:	20c8      	movs	r0, #200	; 0xc8
 8000c56:	f000 f952 	bl	8000efe <delay_ms>
				GB_esp8266_webpagedata();
 8000c5a:	f7ff fc61 	bl	8000520 <GB_esp8266_webpagedata>
				delay_ms(200);
 8000c5e:	20c8      	movs	r0, #200	; 0xc8
 8000c60:	f000 f94d 	bl	8000efe <delay_ms>
				GB_esp8266_webpageclose();
 8000c64:	f7ff fc92 	bl	800058c <GB_esp8266_webpageclose>
				delay_ms(200);
 8000c68:	20c8      	movs	r0, #200	; 0xc8
 8000c6a:	f000 f948 	bl	8000efe <delay_ms>
				}

				delay_ms(1000);
 8000c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c72:	f000 f944 	bl	8000efe <delay_ms>
		{
 8000c76:	e745      	b.n	8000b04 <main+0x54>
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	08001a38 	.word	0x08001a38
 8000c84:	08001a64 	.word	0x08001a64
 8000c88:	08001a74 	.word	0x08001a74
 8000c8c:	08001a84 	.word	0x08001a84
 8000c90:	20000268 	.word	0x20000268
 8000c94:	08001a88 	.word	0x08001a88
 8000c98:	08001a8c 	.word	0x08001a8c
 8000c9c:	08001a9c 	.word	0x08001a9c
 8000ca0:	08001ab0 	.word	0x08001ab0
 8000ca4:	08001abc 	.word	0x08001abc
 8000ca8:	08001ae8 	.word	0x08001ae8
 8000cac:	08001af4 	.word	0x08001af4
 8000cb0:	08001b04 	.word	0x08001b04
 8000cb4:	08001b38 	.word	0x08001b38
 8000cb8:	20000460 	.word	0x20000460

08000cbc <MCO_pin_conf>:
 * 5) Enable the PLL source and wait for it to become stable
 * 6) Enable the Clock source and wait for it to be set
 */

void MCO_pin_conf()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	 RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MCO_pin_conf+0x3c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <MCO_pin_conf+0x3c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
				 GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MCO_pin_conf+0x40>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <MCO_pin_conf+0x40>)
 8000cd2:	f023 030f 	bic.w	r3, r3, #15
 8000cd6:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO PIN MODE AS OUTPUT MAX SPEED 50MHZ
				 GPIOA->CRH |= ( GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0);
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MCO_pin_conf+0x40>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <MCO_pin_conf+0x40>)
 8000cde:	f043 0303 	orr.w	r3, r3, #3
 8000ce2:	6053      	str	r3, [r2, #4]

				 //CONFIGURE GPIO OUTPUT MODE AS alternate function push-pull
				 GPIOA->CRH |= ((GPIO_CRH_CNF8_1) | ~(GPIO_CRH_CNF8_0));
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <MCO_pin_conf+0x40>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <MCO_pin_conf+0x40>)
 8000cea:	f063 0304 	orn	r3, r3, #4
 8000cee:	6053      	str	r3, [r2, #4]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <system_clk>:

void system_clk()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	//ENABLE HSE & WAIT FOR HSE TO BECOME READY
	RCC->CR |= RCC_CR_HSEON ;   // HSE IS 8MHZ
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <system_clk+0x9c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <system_clk+0x9c>)
 8000d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY))
 8000d10:	bf00      	nop
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <system_clk+0x9c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <system_clk+0x12>
		 ;
	//configure flash prefetch and the latency related
	FLASH->ACR |= FLASH_ACR_PRFTBE|FLASH_ACR_LATENCY_1;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <system_clk+0xa0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <system_clk+0xa0>)
 8000d24:	f043 0312 	orr.w	r3, r3, #18
 8000d28:	6013      	str	r3, [r2, #0]
	// CONFIGURE PLL AND Buses(AHB,APB1,APB2)
	//PLL SOURCE: HERE  HSE IS USED AS SOURCE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <system_clk+0x9c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <system_clk+0x9c>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6053      	str	r3, [r2, #4]
	//HSE DEVIDER FOR PLL(IF HSE IS USED AS SOURCE FOR PLL) : NOT DIVIDING CLOCK
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE ;  // SO INPUT TO PLL IS 8MHZ
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <system_clk+0x9c>)
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <system_clk+0x9c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	6053      	str	r3, [r2, #4]
	//PLL MULTIPLIER: HERE I AM MULTIPLYING HSE OUTPUT WITH 4
	RCC->CFGR |= RCC_CFGR_PLLMULL4; //SO OUTPUT FROM PLL IS 32MHZ
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <system_clk+0x9c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <system_clk+0x9c>)
 8000d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d48:	6053      	str	r3, [r2, #4]
	//BUS CLOCK CONFIGURE(APB1,APB2,AHB): NOT DIVIDING
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);  // all buses runs at 32MHZ
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <system_clk+0x9c>)
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <system_clk+0x9c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6053      	str	r3, [r2, #4]
	//ENABLE THE PLL
	RCC->CR |= RCC_CR_PLLON;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <system_clk+0x9c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <system_clk+0x9c>)
 8000d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d5c:	6013      	str	r3, [r2, #0]
	//WAIT FOR PLL TO SET
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8000d5e:	bf00      	nop
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <system_clk+0x9c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f9      	beq.n	8000d60 <system_clk+0x60>
			;

	 //ENABLE SYSTEMCLK AND WAIT
	 RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <system_clk+0x9c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <system_clk+0x9c>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	6053      	str	r3, [r2, #4]
	 while(!(RCC->CFGR & RCC_CFGR_SWS_PLL))
 8000d78:	bf00      	nop
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <system_clk+0x9c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f9      	beq.n	8000d7a <system_clk+0x7a>
	 		 ;

	 MCO_pin_conf();
 8000d86:	f7ff ff99 	bl	8000cbc <MCO_pin_conf>
	 //CLOCK OUTPUT ON MCO PIN
	 RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <system_clk+0x9c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <system_clk+0x9c>)
 8000d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d94:	6053      	str	r3, [r2, #4]
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40022000 	.word	0x40022000

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f000 f8d4 	bl	8000f80 <__errno>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	230c      	movs	r3, #12
 8000ddc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20005000 	.word	0x20005000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	2000025c 	.word	0x2000025c
 8000e0c:	20000898 	.word	0x20000898

08000e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <timer_initialise>:
 * 1 us = 1 count
 * 1ms = 1000us
 * 1 sec = 1000ms
 */
 void timer_initialise()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	// Start by making sure the timer's 'counter' is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	6113      	str	r3, [r2, #16]

	//RESET THE TIMER2 BUS
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <timer_initialise+0xa4>)
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <timer_initialise+0xa4>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <timer_initialise+0xa4>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <timer_initialise+0xa4>)
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	6113      	str	r3, [r2, #16]


	//Enable Timer2 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <timer_initialise+0xa4>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <timer_initialise+0xa4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	61d3      	str	r3, [r2, #28]


    TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6013      	str	r3, [r2, #0]
/**********************for example 1*******************************/
    //Timer prescaler value
    TIM2->PSC = 32;
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	2220      	movs	r2, #32
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
    //TIM2->PSC = 0;
    //Timer Auto reload register value
    TIM2->ARR = 0xffff;
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
    //65535
    //TIM2->ARR = 32;

    TIM2-> CR1 &= ~TIM_CR1_UDIS; // disable this bit so that values assigned from Timer register can move to preload registers
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	6013      	str	r3, [r2, #0]

   //Enable the update generation for updating the shadow register with preload register contents with new values
   TIM2->EGR |= TIM_EGR_UG;
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6153      	str	r3, [r2, #20]
   //Clear the UIF flag as that is set when UG bit is set in EGR to update the content of my register
   TIM2->SR &= ~(TIM_SR_UIF);
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6113      	str	r3, [r2, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <delay_us>:
void delay_us(uint16_t us)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6013      	str	r3, [r2, #0]
	//TIM2-> CR1 |= TIM_CR1_UDIS; // enable this bit so that no register value is updated
	//TIM2->EGR |= TIM_EGR_UG; // SET UG bit to reinitailse the counter register with 0
	TIM2->CNT=0; // initialise counter register
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	//while(!(TIM2->SR & (1<<TIM_SR_UIF)));
	//TIM2->SR &= ~(TIM_SR_UIF); //clear the update interrupt flag as this is set when CNT is reinitialsed with 0
	while(TIM2->CNT < us)
 8000ee6:	bf00      	nop
 8000ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3f9      	bcc.n	8000ee8 <delay_us+0x24>
	{	//uart_tran_dec(TIM2->CNT);
	}
	//TIM2->CR1 &= ~TIM_CR1_CEN;

}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <delay_ms>:
void delay_ms(uint16_t ms)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81fb      	strh	r3, [r7, #14]
 8000f0c:	e006      	b.n	8000f1c <delay_ms+0x1e>
	delay_us(1000);
 8000f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f12:	f7ff ffd7 	bl	8000ec4 <delay_us>
	for (uint16_t i=0; i<ms; i++)
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81fb      	strh	r3, [r7, #14]
 8000f1c:	89fa      	ldrh	r2, [r7, #14]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3f4      	bcc.n	8000f0e <delay_ms+0x10>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f2e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f30:	f7ff ff6e 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	; (8000f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <LoopForever+0xe>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <LoopForever+0x16>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f5a:	f000 f817 	bl	8000f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5e:	f7ff fda7 	bl	8000ab0 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
  ldr   r0, =_estack
 8000f64:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8000f70:	08001ba0 	.word	0x08001ba0
  ldr r2, =_sbss
 8000f74:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8000f78:	20000894 	.word	0x20000894

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>
	...

08000f80 <__errno>:
 8000f80:	4b01      	ldr	r3, [pc, #4]	; (8000f88 <__errno+0x8>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001cc 	.word	0x200001cc

08000f8c <__libc_init_array>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	2500      	movs	r5, #0
 8000f90:	4e0c      	ldr	r6, [pc, #48]	; (8000fc4 <__libc_init_array+0x38>)
 8000f92:	4c0d      	ldr	r4, [pc, #52]	; (8000fc8 <__libc_init_array+0x3c>)
 8000f94:	1ba4      	subs	r4, r4, r6
 8000f96:	10a4      	asrs	r4, r4, #2
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	d109      	bne.n	8000fb0 <__libc_init_array+0x24>
 8000f9c:	f000 fc70 	bl	8001880 <_init>
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	4e0a      	ldr	r6, [pc, #40]	; (8000fcc <__libc_init_array+0x40>)
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <__libc_init_array+0x44>)
 8000fa6:	1ba4      	subs	r4, r4, r6
 8000fa8:	10a4      	asrs	r4, r4, #2
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	d105      	bne.n	8000fba <__libc_init_array+0x2e>
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb4:	4798      	blx	r3
 8000fb6:	3501      	adds	r5, #1
 8000fb8:	e7ee      	b.n	8000f98 <__libc_init_array+0xc>
 8000fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbe:	4798      	blx	r3
 8000fc0:	3501      	adds	r5, #1
 8000fc2:	e7f2      	b.n	8000faa <__libc_init_array+0x1e>
 8000fc4:	08001b98 	.word	0x08001b98
 8000fc8:	08001b98 	.word	0x08001b98
 8000fcc:	08001b98 	.word	0x08001b98
 8000fd0:	08001b9c 	.word	0x08001b9c

08000fd4 <memset>:
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4402      	add	r2, r0
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d100      	bne.n	8000fde <memset+0xa>
 8000fdc:	4770      	bx	lr
 8000fde:	f803 1b01 	strb.w	r1, [r3], #1
 8000fe2:	e7f9      	b.n	8000fd8 <memset+0x4>

08000fe4 <siprintf>:
 8000fe4:	b40e      	push	{r1, r2, r3}
 8000fe6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000fea:	b500      	push	{lr}
 8000fec:	b09c      	sub	sp, #112	; 0x70
 8000fee:	ab1d      	add	r3, sp, #116	; 0x74
 8000ff0:	9002      	str	r0, [sp, #8]
 8000ff2:	9006      	str	r0, [sp, #24]
 8000ff4:	9107      	str	r1, [sp, #28]
 8000ff6:	9104      	str	r1, [sp, #16]
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <siprintf+0x38>)
 8000ffa:	4909      	ldr	r1, [pc, #36]	; (8001020 <siprintf+0x3c>)
 8000ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001000:	9105      	str	r1, [sp, #20]
 8001002:	6800      	ldr	r0, [r0, #0]
 8001004:	a902      	add	r1, sp, #8
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f000 f8a2 	bl	8001150 <_svfiprintf_r>
 800100c:	2200      	movs	r2, #0
 800100e:	9b02      	ldr	r3, [sp, #8]
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	b01c      	add	sp, #112	; 0x70
 8001014:	f85d eb04 	ldr.w	lr, [sp], #4
 8001018:	b003      	add	sp, #12
 800101a:	4770      	bx	lr
 800101c:	200001cc 	.word	0x200001cc
 8001020:	ffff0208 	.word	0xffff0208

08001024 <strchr>:
 8001024:	b2c9      	uxtb	r1, r1
 8001026:	4603      	mov	r3, r0
 8001028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800102c:	b11a      	cbz	r2, 8001036 <strchr+0x12>
 800102e:	428a      	cmp	r2, r1
 8001030:	d1f9      	bne.n	8001026 <strchr+0x2>
 8001032:	4618      	mov	r0, r3
 8001034:	4770      	bx	lr
 8001036:	2900      	cmp	r1, #0
 8001038:	bf18      	it	ne
 800103a:	2300      	movne	r3, #0
 800103c:	e7f9      	b.n	8001032 <strchr+0xe>

0800103e <strncpy>:
 800103e:	b570      	push	{r4, r5, r6, lr}
 8001040:	4604      	mov	r4, r0
 8001042:	3901      	subs	r1, #1
 8001044:	b902      	cbnz	r2, 8001048 <strncpy+0xa>
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	4623      	mov	r3, r4
 800104a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800104e:	1e56      	subs	r6, r2, #1
 8001050:	f803 5b01 	strb.w	r5, [r3], #1
 8001054:	b92d      	cbnz	r5, 8001062 <strncpy+0x24>
 8001056:	4414      	add	r4, r2
 8001058:	42a3      	cmp	r3, r4
 800105a:	d0f4      	beq.n	8001046 <strncpy+0x8>
 800105c:	f803 5b01 	strb.w	r5, [r3], #1
 8001060:	e7fa      	b.n	8001058 <strncpy+0x1a>
 8001062:	461c      	mov	r4, r3
 8001064:	4632      	mov	r2, r6
 8001066:	e7ed      	b.n	8001044 <strncpy+0x6>

08001068 <strstr>:
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	7803      	ldrb	r3, [r0, #0]
 800106c:	b17b      	cbz	r3, 800108e <strstr+0x26>
 800106e:	4604      	mov	r4, r0
 8001070:	7823      	ldrb	r3, [r4, #0]
 8001072:	4620      	mov	r0, r4
 8001074:	1c66      	adds	r6, r4, #1
 8001076:	b17b      	cbz	r3, 8001098 <strstr+0x30>
 8001078:	1e4a      	subs	r2, r1, #1
 800107a:	1e63      	subs	r3, r4, #1
 800107c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001080:	b14d      	cbz	r5, 8001096 <strstr+0x2e>
 8001082:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001086:	4634      	mov	r4, r6
 8001088:	42af      	cmp	r7, r5
 800108a:	d0f7      	beq.n	800107c <strstr+0x14>
 800108c:	e7f0      	b.n	8001070 <strstr+0x8>
 800108e:	780b      	ldrb	r3, [r1, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf18      	it	ne
 8001094:	2000      	movne	r0, #0
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001098:	4618      	mov	r0, r3
 800109a:	e7fc      	b.n	8001096 <strstr+0x2e>

0800109c <__ssputs_r>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	688e      	ldr	r6, [r1, #8]
 80010a2:	4682      	mov	sl, r0
 80010a4:	429e      	cmp	r6, r3
 80010a6:	460c      	mov	r4, r1
 80010a8:	4690      	mov	r8, r2
 80010aa:	4699      	mov	r9, r3
 80010ac:	d837      	bhi.n	800111e <__ssputs_r+0x82>
 80010ae:	898a      	ldrh	r2, [r1, #12]
 80010b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80010b4:	d031      	beq.n	800111a <__ssputs_r+0x7e>
 80010b6:	2302      	movs	r3, #2
 80010b8:	6825      	ldr	r5, [r4, #0]
 80010ba:	6909      	ldr	r1, [r1, #16]
 80010bc:	1a6f      	subs	r7, r5, r1
 80010be:	6965      	ldr	r5, [r4, #20]
 80010c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80010c8:	f109 0301 	add.w	r3, r9, #1
 80010cc:	443b      	add	r3, r7
 80010ce:	429d      	cmp	r5, r3
 80010d0:	bf38      	it	cc
 80010d2:	461d      	movcc	r5, r3
 80010d4:	0553      	lsls	r3, r2, #21
 80010d6:	d530      	bpl.n	800113a <__ssputs_r+0x9e>
 80010d8:	4629      	mov	r1, r5
 80010da:	f000 fb37 	bl	800174c <_malloc_r>
 80010de:	4606      	mov	r6, r0
 80010e0:	b950      	cbnz	r0, 80010f8 <__ssputs_r+0x5c>
 80010e2:	230c      	movs	r3, #12
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f8ca 3000 	str.w	r3, [sl]
 80010ec:	89a3      	ldrh	r3, [r4, #12]
 80010ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f2:	81a3      	strh	r3, [r4, #12]
 80010f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f8:	463a      	mov	r2, r7
 80010fa:	6921      	ldr	r1, [r4, #16]
 80010fc:	f000 fab6 	bl	800166c <memcpy>
 8001100:	89a3      	ldrh	r3, [r4, #12]
 8001102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110a:	81a3      	strh	r3, [r4, #12]
 800110c:	6126      	str	r6, [r4, #16]
 800110e:	443e      	add	r6, r7
 8001110:	6026      	str	r6, [r4, #0]
 8001112:	464e      	mov	r6, r9
 8001114:	6165      	str	r5, [r4, #20]
 8001116:	1bed      	subs	r5, r5, r7
 8001118:	60a5      	str	r5, [r4, #8]
 800111a:	454e      	cmp	r6, r9
 800111c:	d900      	bls.n	8001120 <__ssputs_r+0x84>
 800111e:	464e      	mov	r6, r9
 8001120:	4632      	mov	r2, r6
 8001122:	4641      	mov	r1, r8
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	f000 faac 	bl	8001682 <memmove>
 800112a:	68a3      	ldr	r3, [r4, #8]
 800112c:	2000      	movs	r0, #0
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	60a3      	str	r3, [r4, #8]
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	441e      	add	r6, r3
 8001136:	6026      	str	r6, [r4, #0]
 8001138:	e7dc      	b.n	80010f4 <__ssputs_r+0x58>
 800113a:	462a      	mov	r2, r5
 800113c:	f000 fb60 	bl	8001800 <_realloc_r>
 8001140:	4606      	mov	r6, r0
 8001142:	2800      	cmp	r0, #0
 8001144:	d1e2      	bne.n	800110c <__ssputs_r+0x70>
 8001146:	6921      	ldr	r1, [r4, #16]
 8001148:	4650      	mov	r0, sl
 800114a:	f000 fab3 	bl	80016b4 <_free_r>
 800114e:	e7c8      	b.n	80010e2 <__ssputs_r+0x46>

08001150 <_svfiprintf_r>:
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	461d      	mov	r5, r3
 8001156:	898b      	ldrh	r3, [r1, #12]
 8001158:	b09d      	sub	sp, #116	; 0x74
 800115a:	061f      	lsls	r7, r3, #24
 800115c:	4680      	mov	r8, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4616      	mov	r6, r2
 8001162:	d50f      	bpl.n	8001184 <_svfiprintf_r+0x34>
 8001164:	690b      	ldr	r3, [r1, #16]
 8001166:	b96b      	cbnz	r3, 8001184 <_svfiprintf_r+0x34>
 8001168:	2140      	movs	r1, #64	; 0x40
 800116a:	f000 faef 	bl	800174c <_malloc_r>
 800116e:	6020      	str	r0, [r4, #0]
 8001170:	6120      	str	r0, [r4, #16]
 8001172:	b928      	cbnz	r0, 8001180 <_svfiprintf_r+0x30>
 8001174:	230c      	movs	r3, #12
 8001176:	f8c8 3000 	str.w	r3, [r8]
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	e0c8      	b.n	8001312 <_svfiprintf_r+0x1c2>
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	6163      	str	r3, [r4, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	9309      	str	r3, [sp, #36]	; 0x24
 8001188:	2320      	movs	r3, #32
 800118a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800118e:	2330      	movs	r3, #48	; 0x30
 8001190:	f04f 0b01 	mov.w	fp, #1
 8001194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001198:	9503      	str	r5, [sp, #12]
 800119a:	4637      	mov	r7, r6
 800119c:	463d      	mov	r5, r7
 800119e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80011a2:	b10b      	cbz	r3, 80011a8 <_svfiprintf_r+0x58>
 80011a4:	2b25      	cmp	r3, #37	; 0x25
 80011a6:	d13e      	bne.n	8001226 <_svfiprintf_r+0xd6>
 80011a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80011ac:	d00b      	beq.n	80011c6 <_svfiprintf_r+0x76>
 80011ae:	4653      	mov	r3, sl
 80011b0:	4632      	mov	r2, r6
 80011b2:	4621      	mov	r1, r4
 80011b4:	4640      	mov	r0, r8
 80011b6:	f7ff ff71 	bl	800109c <__ssputs_r>
 80011ba:	3001      	adds	r0, #1
 80011bc:	f000 80a4 	beq.w	8001308 <_svfiprintf_r+0x1b8>
 80011c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c2:	4453      	add	r3, sl
 80011c4:	9309      	str	r3, [sp, #36]	; 0x24
 80011c6:	783b      	ldrb	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 809d 	beq.w	8001308 <_svfiprintf_r+0x1b8>
 80011ce:	2300      	movs	r3, #0
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	9307      	str	r3, [sp, #28]
 80011dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011e0:	931a      	str	r3, [sp, #104]	; 0x68
 80011e2:	462f      	mov	r7, r5
 80011e4:	2205      	movs	r2, #5
 80011e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80011ea:	4850      	ldr	r0, [pc, #320]	; (800132c <_svfiprintf_r+0x1dc>)
 80011ec:	f000 fa30 	bl	8001650 <memchr>
 80011f0:	9b04      	ldr	r3, [sp, #16]
 80011f2:	b9d0      	cbnz	r0, 800122a <_svfiprintf_r+0xda>
 80011f4:	06d9      	lsls	r1, r3, #27
 80011f6:	bf44      	itt	mi
 80011f8:	2220      	movmi	r2, #32
 80011fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80011fe:	071a      	lsls	r2, r3, #28
 8001200:	bf44      	itt	mi
 8001202:	222b      	movmi	r2, #43	; 0x2b
 8001204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001208:	782a      	ldrb	r2, [r5, #0]
 800120a:	2a2a      	cmp	r2, #42	; 0x2a
 800120c:	d015      	beq.n	800123a <_svfiprintf_r+0xea>
 800120e:	462f      	mov	r7, r5
 8001210:	2000      	movs	r0, #0
 8001212:	250a      	movs	r5, #10
 8001214:	9a07      	ldr	r2, [sp, #28]
 8001216:	4639      	mov	r1, r7
 8001218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800121c:	3b30      	subs	r3, #48	; 0x30
 800121e:	2b09      	cmp	r3, #9
 8001220:	d94d      	bls.n	80012be <_svfiprintf_r+0x16e>
 8001222:	b1b8      	cbz	r0, 8001254 <_svfiprintf_r+0x104>
 8001224:	e00f      	b.n	8001246 <_svfiprintf_r+0xf6>
 8001226:	462f      	mov	r7, r5
 8001228:	e7b8      	b.n	800119c <_svfiprintf_r+0x4c>
 800122a:	4a40      	ldr	r2, [pc, #256]	; (800132c <_svfiprintf_r+0x1dc>)
 800122c:	463d      	mov	r5, r7
 800122e:	1a80      	subs	r0, r0, r2
 8001230:	fa0b f000 	lsl.w	r0, fp, r0
 8001234:	4318      	orrs	r0, r3
 8001236:	9004      	str	r0, [sp, #16]
 8001238:	e7d3      	b.n	80011e2 <_svfiprintf_r+0x92>
 800123a:	9a03      	ldr	r2, [sp, #12]
 800123c:	1d11      	adds	r1, r2, #4
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	9103      	str	r1, [sp, #12]
 8001242:	2a00      	cmp	r2, #0
 8001244:	db01      	blt.n	800124a <_svfiprintf_r+0xfa>
 8001246:	9207      	str	r2, [sp, #28]
 8001248:	e004      	b.n	8001254 <_svfiprintf_r+0x104>
 800124a:	4252      	negs	r2, r2
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	9207      	str	r2, [sp, #28]
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	783b      	ldrb	r3, [r7, #0]
 8001256:	2b2e      	cmp	r3, #46	; 0x2e
 8001258:	d10c      	bne.n	8001274 <_svfiprintf_r+0x124>
 800125a:	787b      	ldrb	r3, [r7, #1]
 800125c:	2b2a      	cmp	r3, #42	; 0x2a
 800125e:	d133      	bne.n	80012c8 <_svfiprintf_r+0x178>
 8001260:	9b03      	ldr	r3, [sp, #12]
 8001262:	3702      	adds	r7, #2
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	9203      	str	r2, [sp, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfb8      	it	lt
 800126e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001272:	9305      	str	r3, [sp, #20]
 8001274:	4d2e      	ldr	r5, [pc, #184]	; (8001330 <_svfiprintf_r+0x1e0>)
 8001276:	2203      	movs	r2, #3
 8001278:	7839      	ldrb	r1, [r7, #0]
 800127a:	4628      	mov	r0, r5
 800127c:	f000 f9e8 	bl	8001650 <memchr>
 8001280:	b138      	cbz	r0, 8001292 <_svfiprintf_r+0x142>
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	1b40      	subs	r0, r0, r5
 8001286:	fa03 f000 	lsl.w	r0, r3, r0
 800128a:	9b04      	ldr	r3, [sp, #16]
 800128c:	3701      	adds	r7, #1
 800128e:	4303      	orrs	r3, r0
 8001290:	9304      	str	r3, [sp, #16]
 8001292:	7839      	ldrb	r1, [r7, #0]
 8001294:	2206      	movs	r2, #6
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <_svfiprintf_r+0x1e4>)
 8001298:	1c7e      	adds	r6, r7, #1
 800129a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800129e:	f000 f9d7 	bl	8001650 <memchr>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d038      	beq.n	8001318 <_svfiprintf_r+0x1c8>
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <_svfiprintf_r+0x1e8>)
 80012a8:	bb13      	cbnz	r3, 80012f0 <_svfiprintf_r+0x1a0>
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	3307      	adds	r3, #7
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	3308      	adds	r3, #8
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012b8:	444b      	add	r3, r9
 80012ba:	9309      	str	r3, [sp, #36]	; 0x24
 80012bc:	e76d      	b.n	800119a <_svfiprintf_r+0x4a>
 80012be:	fb05 3202 	mla	r2, r5, r2, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	460f      	mov	r7, r1
 80012c6:	e7a6      	b.n	8001216 <_svfiprintf_r+0xc6>
 80012c8:	2300      	movs	r3, #0
 80012ca:	250a      	movs	r5, #10
 80012cc:	4619      	mov	r1, r3
 80012ce:	3701      	adds	r7, #1
 80012d0:	9305      	str	r3, [sp, #20]
 80012d2:	4638      	mov	r0, r7
 80012d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012d8:	3a30      	subs	r2, #48	; 0x30
 80012da:	2a09      	cmp	r2, #9
 80012dc:	d903      	bls.n	80012e6 <_svfiprintf_r+0x196>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0c8      	beq.n	8001274 <_svfiprintf_r+0x124>
 80012e2:	9105      	str	r1, [sp, #20]
 80012e4:	e7c6      	b.n	8001274 <_svfiprintf_r+0x124>
 80012e6:	fb05 2101 	mla	r1, r5, r1, r2
 80012ea:	2301      	movs	r3, #1
 80012ec:	4607      	mov	r7, r0
 80012ee:	e7f0      	b.n	80012d2 <_svfiprintf_r+0x182>
 80012f0:	ab03      	add	r3, sp, #12
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	4622      	mov	r2, r4
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <_svfiprintf_r+0x1ec>)
 80012f8:	a904      	add	r1, sp, #16
 80012fa:	4640      	mov	r0, r8
 80012fc:	f3af 8000 	nop.w
 8001300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001304:	4681      	mov	r9, r0
 8001306:	d1d6      	bne.n	80012b6 <_svfiprintf_r+0x166>
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	065b      	lsls	r3, r3, #25
 800130c:	f53f af35 	bmi.w	800117a <_svfiprintf_r+0x2a>
 8001310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001312:	b01d      	add	sp, #116	; 0x74
 8001314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001318:	ab03      	add	r3, sp, #12
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4622      	mov	r2, r4
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_svfiprintf_r+0x1ec>)
 8001320:	a904      	add	r1, sp, #16
 8001322:	4640      	mov	r0, r8
 8001324:	f000 f882 	bl	800142c <_printf_i>
 8001328:	e7ea      	b.n	8001300 <_svfiprintf_r+0x1b0>
 800132a:	bf00      	nop
 800132c:	08001b64 	.word	0x08001b64
 8001330:	08001b6a 	.word	0x08001b6a
 8001334:	08001b6e 	.word	0x08001b6e
 8001338:	00000000 	.word	0x00000000
 800133c:	0800109d 	.word	0x0800109d

08001340 <_printf_common>:
 8001340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001344:	4691      	mov	r9, r2
 8001346:	461f      	mov	r7, r3
 8001348:	688a      	ldr	r2, [r1, #8]
 800134a:	690b      	ldr	r3, [r1, #16]
 800134c:	4606      	mov	r6, r0
 800134e:	4293      	cmp	r3, r2
 8001350:	bfb8      	it	lt
 8001352:	4613      	movlt	r3, r2
 8001354:	f8c9 3000 	str.w	r3, [r9]
 8001358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800135c:	460c      	mov	r4, r1
 800135e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001362:	b112      	cbz	r2, 800136a <_printf_common+0x2a>
 8001364:	3301      	adds	r3, #1
 8001366:	f8c9 3000 	str.w	r3, [r9]
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	0699      	lsls	r1, r3, #26
 800136e:	bf42      	ittt	mi
 8001370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001374:	3302      	addmi	r3, #2
 8001376:	f8c9 3000 	strmi.w	r3, [r9]
 800137a:	6825      	ldr	r5, [r4, #0]
 800137c:	f015 0506 	ands.w	r5, r5, #6
 8001380:	d107      	bne.n	8001392 <_printf_common+0x52>
 8001382:	f104 0a19 	add.w	sl, r4, #25
 8001386:	68e3      	ldr	r3, [r4, #12]
 8001388:	f8d9 2000 	ldr.w	r2, [r9]
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	42ab      	cmp	r3, r5
 8001390:	dc29      	bgt.n	80013e6 <_printf_common+0xa6>
 8001392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	3300      	adds	r3, #0
 800139a:	bf18      	it	ne
 800139c:	2301      	movne	r3, #1
 800139e:	0692      	lsls	r2, r2, #26
 80013a0:	d42e      	bmi.n	8001400 <_printf_common+0xc0>
 80013a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013a6:	4639      	mov	r1, r7
 80013a8:	4630      	mov	r0, r6
 80013aa:	47c0      	blx	r8
 80013ac:	3001      	adds	r0, #1
 80013ae:	d021      	beq.n	80013f4 <_printf_common+0xb4>
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	68e5      	ldr	r5, [r4, #12]
 80013b4:	f003 0306 	and.w	r3, r3, #6
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	bf18      	it	ne
 80013bc:	2500      	movne	r5, #0
 80013be:	f8d9 2000 	ldr.w	r2, [r9]
 80013c2:	f04f 0900 	mov.w	r9, #0
 80013c6:	bf08      	it	eq
 80013c8:	1aad      	subeq	r5, r5, r2
 80013ca:	68a3      	ldr	r3, [r4, #8]
 80013cc:	6922      	ldr	r2, [r4, #16]
 80013ce:	bf08      	it	eq
 80013d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013d4:	4293      	cmp	r3, r2
 80013d6:	bfc4      	itt	gt
 80013d8:	1a9b      	subgt	r3, r3, r2
 80013da:	18ed      	addgt	r5, r5, r3
 80013dc:	341a      	adds	r4, #26
 80013de:	454d      	cmp	r5, r9
 80013e0:	d11a      	bne.n	8001418 <_printf_common+0xd8>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e008      	b.n	80013f8 <_printf_common+0xb8>
 80013e6:	2301      	movs	r3, #1
 80013e8:	4652      	mov	r2, sl
 80013ea:	4639      	mov	r1, r7
 80013ec:	4630      	mov	r0, r6
 80013ee:	47c0      	blx	r8
 80013f0:	3001      	adds	r0, #1
 80013f2:	d103      	bne.n	80013fc <_printf_common+0xbc>
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013fc:	3501      	adds	r5, #1
 80013fe:	e7c2      	b.n	8001386 <_printf_common+0x46>
 8001400:	2030      	movs	r0, #48	; 0x30
 8001402:	18e1      	adds	r1, r4, r3
 8001404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800140e:	4422      	add	r2, r4
 8001410:	3302      	adds	r3, #2
 8001412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001416:	e7c4      	b.n	80013a2 <_printf_common+0x62>
 8001418:	2301      	movs	r3, #1
 800141a:	4622      	mov	r2, r4
 800141c:	4639      	mov	r1, r7
 800141e:	4630      	mov	r0, r6
 8001420:	47c0      	blx	r8
 8001422:	3001      	adds	r0, #1
 8001424:	d0e6      	beq.n	80013f4 <_printf_common+0xb4>
 8001426:	f109 0901 	add.w	r9, r9, #1
 800142a:	e7d8      	b.n	80013de <_printf_common+0x9e>

0800142c <_printf_i>:
 800142c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001434:	460c      	mov	r4, r1
 8001436:	7e09      	ldrb	r1, [r1, #24]
 8001438:	b085      	sub	sp, #20
 800143a:	296e      	cmp	r1, #110	; 0x6e
 800143c:	4617      	mov	r7, r2
 800143e:	4606      	mov	r6, r0
 8001440:	4698      	mov	r8, r3
 8001442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001444:	f000 80b3 	beq.w	80015ae <_printf_i+0x182>
 8001448:	d822      	bhi.n	8001490 <_printf_i+0x64>
 800144a:	2963      	cmp	r1, #99	; 0x63
 800144c:	d036      	beq.n	80014bc <_printf_i+0x90>
 800144e:	d80a      	bhi.n	8001466 <_printf_i+0x3a>
 8001450:	2900      	cmp	r1, #0
 8001452:	f000 80b9 	beq.w	80015c8 <_printf_i+0x19c>
 8001456:	2958      	cmp	r1, #88	; 0x58
 8001458:	f000 8083 	beq.w	8001562 <_printf_i+0x136>
 800145c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001464:	e032      	b.n	80014cc <_printf_i+0xa0>
 8001466:	2964      	cmp	r1, #100	; 0x64
 8001468:	d001      	beq.n	800146e <_printf_i+0x42>
 800146a:	2969      	cmp	r1, #105	; 0x69
 800146c:	d1f6      	bne.n	800145c <_printf_i+0x30>
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	0605      	lsls	r5, r0, #24
 8001474:	f103 0104 	add.w	r1, r3, #4
 8001478:	d52a      	bpl.n	80014d0 <_printf_i+0xa4>
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6011      	str	r1, [r2, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	da03      	bge.n	800148a <_printf_i+0x5e>
 8001482:	222d      	movs	r2, #45	; 0x2d
 8001484:	425b      	negs	r3, r3
 8001486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800148a:	486f      	ldr	r0, [pc, #444]	; (8001648 <_printf_i+0x21c>)
 800148c:	220a      	movs	r2, #10
 800148e:	e039      	b.n	8001504 <_printf_i+0xd8>
 8001490:	2973      	cmp	r1, #115	; 0x73
 8001492:	f000 809d 	beq.w	80015d0 <_printf_i+0x1a4>
 8001496:	d808      	bhi.n	80014aa <_printf_i+0x7e>
 8001498:	296f      	cmp	r1, #111	; 0x6f
 800149a:	d020      	beq.n	80014de <_printf_i+0xb2>
 800149c:	2970      	cmp	r1, #112	; 0x70
 800149e:	d1dd      	bne.n	800145c <_printf_i+0x30>
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	6023      	str	r3, [r4, #0]
 80014a8:	e003      	b.n	80014b2 <_printf_i+0x86>
 80014aa:	2975      	cmp	r1, #117	; 0x75
 80014ac:	d017      	beq.n	80014de <_printf_i+0xb2>
 80014ae:	2978      	cmp	r1, #120	; 0x78
 80014b0:	d1d4      	bne.n	800145c <_printf_i+0x30>
 80014b2:	2378      	movs	r3, #120	; 0x78
 80014b4:	4865      	ldr	r0, [pc, #404]	; (800164c <_printf_i+0x220>)
 80014b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ba:	e055      	b.n	8001568 <_printf_i+0x13c>
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014c2:	1d19      	adds	r1, r3, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6011      	str	r1, [r2, #0]
 80014c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014cc:	2301      	movs	r3, #1
 80014ce:	e08c      	b.n	80015ea <_printf_i+0x1be>
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80014d6:	6011      	str	r1, [r2, #0]
 80014d8:	bf18      	it	ne
 80014da:	b21b      	sxthne	r3, r3
 80014dc:	e7cf      	b.n	800147e <_printf_i+0x52>
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	6825      	ldr	r5, [r4, #0]
 80014e2:	1d18      	adds	r0, r3, #4
 80014e4:	6010      	str	r0, [r2, #0]
 80014e6:	0628      	lsls	r0, r5, #24
 80014e8:	d501      	bpl.n	80014ee <_printf_i+0xc2>
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e002      	b.n	80014f4 <_printf_i+0xc8>
 80014ee:	0668      	lsls	r0, r5, #25
 80014f0:	d5fb      	bpl.n	80014ea <_printf_i+0xbe>
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	296f      	cmp	r1, #111	; 0x6f
 80014f6:	bf14      	ite	ne
 80014f8:	220a      	movne	r2, #10
 80014fa:	2208      	moveq	r2, #8
 80014fc:	4852      	ldr	r0, [pc, #328]	; (8001648 <_printf_i+0x21c>)
 80014fe:	2100      	movs	r1, #0
 8001500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001504:	6865      	ldr	r5, [r4, #4]
 8001506:	2d00      	cmp	r5, #0
 8001508:	60a5      	str	r5, [r4, #8]
 800150a:	f2c0 8095 	blt.w	8001638 <_printf_i+0x20c>
 800150e:	6821      	ldr	r1, [r4, #0]
 8001510:	f021 0104 	bic.w	r1, r1, #4
 8001514:	6021      	str	r1, [r4, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d13d      	bne.n	8001596 <_printf_i+0x16a>
 800151a:	2d00      	cmp	r5, #0
 800151c:	f040 808e 	bne.w	800163c <_printf_i+0x210>
 8001520:	4665      	mov	r5, ip
 8001522:	2a08      	cmp	r2, #8
 8001524:	d10b      	bne.n	800153e <_printf_i+0x112>
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	07db      	lsls	r3, r3, #31
 800152a:	d508      	bpl.n	800153e <_printf_i+0x112>
 800152c:	6923      	ldr	r3, [r4, #16]
 800152e:	6862      	ldr	r2, [r4, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	bfde      	ittt	le
 8001534:	2330      	movle	r3, #48	; 0x30
 8001536:	f805 3c01 	strble.w	r3, [r5, #-1]
 800153a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800153e:	ebac 0305 	sub.w	r3, ip, r5
 8001542:	6123      	str	r3, [r4, #16]
 8001544:	f8cd 8000 	str.w	r8, [sp]
 8001548:	463b      	mov	r3, r7
 800154a:	aa03      	add	r2, sp, #12
 800154c:	4621      	mov	r1, r4
 800154e:	4630      	mov	r0, r6
 8001550:	f7ff fef6 	bl	8001340 <_printf_common>
 8001554:	3001      	adds	r0, #1
 8001556:	d14d      	bne.n	80015f4 <_printf_i+0x1c8>
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	b005      	add	sp, #20
 800155e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001562:	4839      	ldr	r0, [pc, #228]	; (8001648 <_printf_i+0x21c>)
 8001564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	6821      	ldr	r1, [r4, #0]
 800156c:	1d1d      	adds	r5, r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6015      	str	r5, [r2, #0]
 8001572:	060a      	lsls	r2, r1, #24
 8001574:	d50b      	bpl.n	800158e <_printf_i+0x162>
 8001576:	07ca      	lsls	r2, r1, #31
 8001578:	bf44      	itt	mi
 800157a:	f041 0120 	orrmi.w	r1, r1, #32
 800157e:	6021      	strmi	r1, [r4, #0]
 8001580:	b91b      	cbnz	r3, 800158a <_printf_i+0x15e>
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	f022 0220 	bic.w	r2, r2, #32
 8001588:	6022      	str	r2, [r4, #0]
 800158a:	2210      	movs	r2, #16
 800158c:	e7b7      	b.n	80014fe <_printf_i+0xd2>
 800158e:	064d      	lsls	r5, r1, #25
 8001590:	bf48      	it	mi
 8001592:	b29b      	uxthmi	r3, r3
 8001594:	e7ef      	b.n	8001576 <_printf_i+0x14a>
 8001596:	4665      	mov	r5, ip
 8001598:	fbb3 f1f2 	udiv	r1, r3, r2
 800159c:	fb02 3311 	mls	r3, r2, r1, r3
 80015a0:	5cc3      	ldrb	r3, [r0, r3]
 80015a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80015a6:	460b      	mov	r3, r1
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d1f5      	bne.n	8001598 <_printf_i+0x16c>
 80015ac:	e7b9      	b.n	8001522 <_printf_i+0xf6>
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	6825      	ldr	r5, [r4, #0]
 80015b2:	1d18      	adds	r0, r3, #4
 80015b4:	6961      	ldr	r1, [r4, #20]
 80015b6:	6010      	str	r0, [r2, #0]
 80015b8:	0628      	lsls	r0, r5, #24
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	d501      	bpl.n	80015c2 <_printf_i+0x196>
 80015be:	6019      	str	r1, [r3, #0]
 80015c0:	e002      	b.n	80015c8 <_printf_i+0x19c>
 80015c2:	066a      	lsls	r2, r5, #25
 80015c4:	d5fb      	bpl.n	80015be <_printf_i+0x192>
 80015c6:	8019      	strh	r1, [r3, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	4665      	mov	r5, ip
 80015cc:	6123      	str	r3, [r4, #16]
 80015ce:	e7b9      	b.n	8001544 <_printf_i+0x118>
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	1d19      	adds	r1, r3, #4
 80015d4:	6011      	str	r1, [r2, #0]
 80015d6:	681d      	ldr	r5, [r3, #0]
 80015d8:	6862      	ldr	r2, [r4, #4]
 80015da:	2100      	movs	r1, #0
 80015dc:	4628      	mov	r0, r5
 80015de:	f000 f837 	bl	8001650 <memchr>
 80015e2:	b108      	cbz	r0, 80015e8 <_printf_i+0x1bc>
 80015e4:	1b40      	subs	r0, r0, r5
 80015e6:	6060      	str	r0, [r4, #4]
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	6123      	str	r3, [r4, #16]
 80015ec:	2300      	movs	r3, #0
 80015ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015f2:	e7a7      	b.n	8001544 <_printf_i+0x118>
 80015f4:	6923      	ldr	r3, [r4, #16]
 80015f6:	462a      	mov	r2, r5
 80015f8:	4639      	mov	r1, r7
 80015fa:	4630      	mov	r0, r6
 80015fc:	47c0      	blx	r8
 80015fe:	3001      	adds	r0, #1
 8001600:	d0aa      	beq.n	8001558 <_printf_i+0x12c>
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	079b      	lsls	r3, r3, #30
 8001606:	d413      	bmi.n	8001630 <_printf_i+0x204>
 8001608:	68e0      	ldr	r0, [r4, #12]
 800160a:	9b03      	ldr	r3, [sp, #12]
 800160c:	4298      	cmp	r0, r3
 800160e:	bfb8      	it	lt
 8001610:	4618      	movlt	r0, r3
 8001612:	e7a3      	b.n	800155c <_printf_i+0x130>
 8001614:	2301      	movs	r3, #1
 8001616:	464a      	mov	r2, r9
 8001618:	4639      	mov	r1, r7
 800161a:	4630      	mov	r0, r6
 800161c:	47c0      	blx	r8
 800161e:	3001      	adds	r0, #1
 8001620:	d09a      	beq.n	8001558 <_printf_i+0x12c>
 8001622:	3501      	adds	r5, #1
 8001624:	68e3      	ldr	r3, [r4, #12]
 8001626:	9a03      	ldr	r2, [sp, #12]
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	42ab      	cmp	r3, r5
 800162c:	dcf2      	bgt.n	8001614 <_printf_i+0x1e8>
 800162e:	e7eb      	b.n	8001608 <_printf_i+0x1dc>
 8001630:	2500      	movs	r5, #0
 8001632:	f104 0919 	add.w	r9, r4, #25
 8001636:	e7f5      	b.n	8001624 <_printf_i+0x1f8>
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ac      	bne.n	8001596 <_printf_i+0x16a>
 800163c:	7803      	ldrb	r3, [r0, #0]
 800163e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001642:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001646:	e76c      	b.n	8001522 <_printf_i+0xf6>
 8001648:	08001b75 	.word	0x08001b75
 800164c:	08001b86 	.word	0x08001b86

08001650 <memchr>:
 8001650:	b510      	push	{r4, lr}
 8001652:	b2c9      	uxtb	r1, r1
 8001654:	4402      	add	r2, r0
 8001656:	4290      	cmp	r0, r2
 8001658:	4603      	mov	r3, r0
 800165a:	d101      	bne.n	8001660 <memchr+0x10>
 800165c:	2300      	movs	r3, #0
 800165e:	e003      	b.n	8001668 <memchr+0x18>
 8001660:	781c      	ldrb	r4, [r3, #0]
 8001662:	3001      	adds	r0, #1
 8001664:	428c      	cmp	r4, r1
 8001666:	d1f6      	bne.n	8001656 <memchr+0x6>
 8001668:	4618      	mov	r0, r3
 800166a:	bd10      	pop	{r4, pc}

0800166c <memcpy>:
 800166c:	b510      	push	{r4, lr}
 800166e:	1e43      	subs	r3, r0, #1
 8001670:	440a      	add	r2, r1
 8001672:	4291      	cmp	r1, r2
 8001674:	d100      	bne.n	8001678 <memcpy+0xc>
 8001676:	bd10      	pop	{r4, pc}
 8001678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800167c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001680:	e7f7      	b.n	8001672 <memcpy+0x6>

08001682 <memmove>:
 8001682:	4288      	cmp	r0, r1
 8001684:	b510      	push	{r4, lr}
 8001686:	eb01 0302 	add.w	r3, r1, r2
 800168a:	d807      	bhi.n	800169c <memmove+0x1a>
 800168c:	1e42      	subs	r2, r0, #1
 800168e:	4299      	cmp	r1, r3
 8001690:	d00a      	beq.n	80016a8 <memmove+0x26>
 8001692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001696:	f802 4f01 	strb.w	r4, [r2, #1]!
 800169a:	e7f8      	b.n	800168e <memmove+0xc>
 800169c:	4283      	cmp	r3, r0
 800169e:	d9f5      	bls.n	800168c <memmove+0xa>
 80016a0:	1881      	adds	r1, r0, r2
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	42d3      	cmn	r3, r2
 80016a6:	d100      	bne.n	80016aa <memmove+0x28>
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80016b2:	e7f7      	b.n	80016a4 <memmove+0x22>

080016b4 <_free_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4605      	mov	r5, r0
 80016b8:	2900      	cmp	r1, #0
 80016ba:	d043      	beq.n	8001744 <_free_r+0x90>
 80016bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016c0:	1f0c      	subs	r4, r1, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bfb8      	it	lt
 80016c6:	18e4      	addlt	r4, r4, r3
 80016c8:	f000 f8d0 	bl	800186c <__malloc_lock>
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <_free_r+0x94>)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	4610      	mov	r0, r2
 80016d2:	b933      	cbnz	r3, 80016e2 <_free_r+0x2e>
 80016d4:	6063      	str	r3, [r4, #4]
 80016d6:	6014      	str	r4, [r2, #0]
 80016d8:	4628      	mov	r0, r5
 80016da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016de:	f000 b8c6 	b.w	800186e <__malloc_unlock>
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	d90b      	bls.n	80016fe <_free_r+0x4a>
 80016e6:	6821      	ldr	r1, [r4, #0]
 80016e8:	1862      	adds	r2, r4, r1
 80016ea:	4293      	cmp	r3, r2
 80016ec:	bf01      	itttt	eq
 80016ee:	681a      	ldreq	r2, [r3, #0]
 80016f0:	685b      	ldreq	r3, [r3, #4]
 80016f2:	1852      	addeq	r2, r2, r1
 80016f4:	6022      	streq	r2, [r4, #0]
 80016f6:	6063      	str	r3, [r4, #4]
 80016f8:	6004      	str	r4, [r0, #0]
 80016fa:	e7ed      	b.n	80016d8 <_free_r+0x24>
 80016fc:	4613      	mov	r3, r2
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	b10a      	cbz	r2, 8001706 <_free_r+0x52>
 8001702:	42a2      	cmp	r2, r4
 8001704:	d9fa      	bls.n	80016fc <_free_r+0x48>
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	1858      	adds	r0, r3, r1
 800170a:	42a0      	cmp	r0, r4
 800170c:	d10b      	bne.n	8001726 <_free_r+0x72>
 800170e:	6820      	ldr	r0, [r4, #0]
 8001710:	4401      	add	r1, r0
 8001712:	1858      	adds	r0, r3, r1
 8001714:	4282      	cmp	r2, r0
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	d1de      	bne.n	80016d8 <_free_r+0x24>
 800171a:	6810      	ldr	r0, [r2, #0]
 800171c:	6852      	ldr	r2, [r2, #4]
 800171e:	4401      	add	r1, r0
 8001720:	6019      	str	r1, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	e7d8      	b.n	80016d8 <_free_r+0x24>
 8001726:	d902      	bls.n	800172e <_free_r+0x7a>
 8001728:	230c      	movs	r3, #12
 800172a:	602b      	str	r3, [r5, #0]
 800172c:	e7d4      	b.n	80016d8 <_free_r+0x24>
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	1821      	adds	r1, r4, r0
 8001732:	428a      	cmp	r2, r1
 8001734:	bf01      	itttt	eq
 8001736:	6811      	ldreq	r1, [r2, #0]
 8001738:	6852      	ldreq	r2, [r2, #4]
 800173a:	1809      	addeq	r1, r1, r0
 800173c:	6021      	streq	r1, [r4, #0]
 800173e:	6062      	str	r2, [r4, #4]
 8001740:	605c      	str	r4, [r3, #4]
 8001742:	e7c9      	b.n	80016d8 <_free_r+0x24>
 8001744:	bd38      	pop	{r3, r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	20000260 	.word	0x20000260

0800174c <_malloc_r>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	1ccd      	adds	r5, r1, #3
 8001750:	f025 0503 	bic.w	r5, r5, #3
 8001754:	3508      	adds	r5, #8
 8001756:	2d0c      	cmp	r5, #12
 8001758:	bf38      	it	cc
 800175a:	250c      	movcc	r5, #12
 800175c:	2d00      	cmp	r5, #0
 800175e:	4606      	mov	r6, r0
 8001760:	db01      	blt.n	8001766 <_malloc_r+0x1a>
 8001762:	42a9      	cmp	r1, r5
 8001764:	d903      	bls.n	800176e <_malloc_r+0x22>
 8001766:	230c      	movs	r3, #12
 8001768:	6033      	str	r3, [r6, #0]
 800176a:	2000      	movs	r0, #0
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	f000 f87d 	bl	800186c <__malloc_lock>
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <_malloc_r+0xac>)
 8001774:	6814      	ldr	r4, [r2, #0]
 8001776:	4621      	mov	r1, r4
 8001778:	b991      	cbnz	r1, 80017a0 <_malloc_r+0x54>
 800177a:	4c20      	ldr	r4, [pc, #128]	; (80017fc <_malloc_r+0xb0>)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	b91b      	cbnz	r3, 8001788 <_malloc_r+0x3c>
 8001780:	4630      	mov	r0, r6
 8001782:	f000 f863 	bl	800184c <_sbrk_r>
 8001786:	6020      	str	r0, [r4, #0]
 8001788:	4629      	mov	r1, r5
 800178a:	4630      	mov	r0, r6
 800178c:	f000 f85e 	bl	800184c <_sbrk_r>
 8001790:	1c43      	adds	r3, r0, #1
 8001792:	d124      	bne.n	80017de <_malloc_r+0x92>
 8001794:	230c      	movs	r3, #12
 8001796:	4630      	mov	r0, r6
 8001798:	6033      	str	r3, [r6, #0]
 800179a:	f000 f868 	bl	800186e <__malloc_unlock>
 800179e:	e7e4      	b.n	800176a <_malloc_r+0x1e>
 80017a0:	680b      	ldr	r3, [r1, #0]
 80017a2:	1b5b      	subs	r3, r3, r5
 80017a4:	d418      	bmi.n	80017d8 <_malloc_r+0x8c>
 80017a6:	2b0b      	cmp	r3, #11
 80017a8:	d90f      	bls.n	80017ca <_malloc_r+0x7e>
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	18cc      	adds	r4, r1, r3
 80017ae:	50cd      	str	r5, [r1, r3]
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f85c 	bl	800186e <__malloc_unlock>
 80017b6:	f104 000b 	add.w	r0, r4, #11
 80017ba:	1d23      	adds	r3, r4, #4
 80017bc:	f020 0007 	bic.w	r0, r0, #7
 80017c0:	1ac3      	subs	r3, r0, r3
 80017c2:	d0d3      	beq.n	800176c <_malloc_r+0x20>
 80017c4:	425a      	negs	r2, r3
 80017c6:	50e2      	str	r2, [r4, r3]
 80017c8:	e7d0      	b.n	800176c <_malloc_r+0x20>
 80017ca:	684b      	ldr	r3, [r1, #4]
 80017cc:	428c      	cmp	r4, r1
 80017ce:	bf16      	itet	ne
 80017d0:	6063      	strne	r3, [r4, #4]
 80017d2:	6013      	streq	r3, [r2, #0]
 80017d4:	460c      	movne	r4, r1
 80017d6:	e7eb      	b.n	80017b0 <_malloc_r+0x64>
 80017d8:	460c      	mov	r4, r1
 80017da:	6849      	ldr	r1, [r1, #4]
 80017dc:	e7cc      	b.n	8001778 <_malloc_r+0x2c>
 80017de:	1cc4      	adds	r4, r0, #3
 80017e0:	f024 0403 	bic.w	r4, r4, #3
 80017e4:	42a0      	cmp	r0, r4
 80017e6:	d005      	beq.n	80017f4 <_malloc_r+0xa8>
 80017e8:	1a21      	subs	r1, r4, r0
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 f82e 	bl	800184c <_sbrk_r>
 80017f0:	3001      	adds	r0, #1
 80017f2:	d0cf      	beq.n	8001794 <_malloc_r+0x48>
 80017f4:	6025      	str	r5, [r4, #0]
 80017f6:	e7db      	b.n	80017b0 <_malloc_r+0x64>
 80017f8:	20000260 	.word	0x20000260
 80017fc:	20000264 	.word	0x20000264

08001800 <_realloc_r>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4607      	mov	r7, r0
 8001804:	4614      	mov	r4, r2
 8001806:	460e      	mov	r6, r1
 8001808:	b921      	cbnz	r1, 8001814 <_realloc_r+0x14>
 800180a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800180e:	4611      	mov	r1, r2
 8001810:	f7ff bf9c 	b.w	800174c <_malloc_r>
 8001814:	b922      	cbnz	r2, 8001820 <_realloc_r+0x20>
 8001816:	f7ff ff4d 	bl	80016b4 <_free_r>
 800181a:	4625      	mov	r5, r4
 800181c:	4628      	mov	r0, r5
 800181e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001820:	f000 f826 	bl	8001870 <_malloc_usable_size_r>
 8001824:	42a0      	cmp	r0, r4
 8001826:	d20f      	bcs.n	8001848 <_realloc_r+0x48>
 8001828:	4621      	mov	r1, r4
 800182a:	4638      	mov	r0, r7
 800182c:	f7ff ff8e 	bl	800174c <_malloc_r>
 8001830:	4605      	mov	r5, r0
 8001832:	2800      	cmp	r0, #0
 8001834:	d0f2      	beq.n	800181c <_realloc_r+0x1c>
 8001836:	4631      	mov	r1, r6
 8001838:	4622      	mov	r2, r4
 800183a:	f7ff ff17 	bl	800166c <memcpy>
 800183e:	4631      	mov	r1, r6
 8001840:	4638      	mov	r0, r7
 8001842:	f7ff ff37 	bl	80016b4 <_free_r>
 8001846:	e7e9      	b.n	800181c <_realloc_r+0x1c>
 8001848:	4635      	mov	r5, r6
 800184a:	e7e7      	b.n	800181c <_realloc_r+0x1c>

0800184c <_sbrk_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	2300      	movs	r3, #0
 8001850:	4c05      	ldr	r4, [pc, #20]	; (8001868 <_sbrk_r+0x1c>)
 8001852:	4605      	mov	r5, r0
 8001854:	4608      	mov	r0, r1
 8001856:	6023      	str	r3, [r4, #0]
 8001858:	f7ff faa4 	bl	8000da4 <_sbrk>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <_sbrk_r+0x1a>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	b103      	cbz	r3, 8001866 <_sbrk_r+0x1a>
 8001864:	602b      	str	r3, [r5, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	20000890 	.word	0x20000890

0800186c <__malloc_lock>:
 800186c:	4770      	bx	lr

0800186e <__malloc_unlock>:
 800186e:	4770      	bx	lr

08001870 <_malloc_usable_size_r>:
 8001870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001874:	1f18      	subs	r0, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	bfbc      	itt	lt
 800187a:	580b      	ldrlt	r3, [r1, r0]
 800187c:	18c0      	addlt	r0, r0, r3
 800187e:	4770      	bx	lr

08001880 <_init>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr

0800188c <_fini>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	bf00      	nop
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr
